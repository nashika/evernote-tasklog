// Generated by CoffeeScript 1.9.3
(function() {
  var DataSource, Evernote, async, config, core,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  async = require('async');

  Evernote = require('evernote').Evernote;

  core = require('./core');

  config = require('../config');

  DataSource = (function() {
    function DataSource() {
      this._parseNote = bind(this._parseNote, this);
      this.reloadNotes = bind(this.reloadNotes, this);
    }


    /**
     * @public
     * @param {string} words
     * @param {function} callback
     */

    DataSource.prototype.reloadNotes = function(words, callback) {
      var noteFilter, noteStore, resultSpec;
      if (words == null) {
        words = null;
      }
      noteStore = core.client.getNoteStore();
      noteFilter = new Evernote.NoteFilter();
      if (words) {
        noteFilter.words = words;
      }
      resultSpec = new Evernote.NotesMetadataResultSpec();
      return noteStore.findNotesMetadata(noteFilter, 0, 100, resultSpec, (function(_this) {
        return function(err, notesMeta) {
          if (err) {
            return callback(err);
          }
          return async.eachSeries(notesMeta.notes, function(noteMeta, callback) {
            noteStore = core.client.getNoteStore();
            return noteStore.getNote(noteMeta.guid, true, false, false, false, function(err, note) {
              if (err) {
                return callback(err);
              }
              return core.db.notes.update({
                guid: note.guid
              }, note, {
                upsert: true
              }, function(err, numReplaced, newDoc) {
                if (err) {
                  return callback(err);
                }
                console.log("A note is loaded. guid=" + note.guid + " title=" + note.title);
                return _this._parseNote(note, callback);
              });
            });
          }, function(err) {
            if (err) {
              return callback(err);
            }
            return callback();
          });
        };
      })(this));
    };


    /**
     * @protected
     * @param {Object} note
     * @param {function} callback
     */

    DataSource.prototype._parseNote = function(note, callback) {
      var attributesText, clearLine, content, dateText, i, j, len, len1, line, matches, personText, profitLogs, ref, ref1, spentHour, spentMinute, spentTimeText, timeLog, timeLogs, timeText;
      content = note.content;
      timeLogs = [];
      profitLogs = [];
      content = content.replace(/\r\n|\r|\n|<br\/>|<\/div>|<\/ul>|<\/li>/g, '<>');
      ref = content.split('<>');
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        clearLine = line.replace(/<[^>]*>/g, '');
        if (matches = clearLine.match(/(.*)[@＠](\d{2,4}[\/\-]\d{1,2}[\/\-]\d{1,2}.+)/)) {
          timeLog = {
            noteGuid: note.guid,
            comment: matches[1],
            allDay: true,
            date: null,
            person: null,
            spentTime: null
          };
          attributesText = matches[2];
          dateText = (matches = attributesText.match(/\d{2,4}[\/\-]\d{1,2}[\/\-]\d{1,2}/)) ? matches[0] : '';
          timeText = (matches = attributesText.match(/\d{1,2}:\d{1,2}:\d{1,2}|\d{1,2}:\d{1,2}/)) ? matches[0] : '';
          timeLog.date = new Date(dateText + ' ' + timeText);
          if (timeText) {
            timeLog.allDay = false;
          }
          ref1 = config.personTexts;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            personText = ref1[j];
            if (attributesText.indexOf(personText) !== -1) {
              timeLog.person = personText;
            }
          }
          if (matches = attributesText.match(/\d+h\d+m|\d+m|\d+h|\d+\.\d+h/i)) {
            spentTimeText = matches[0];
            spentHour = (matches = spentTimeText.match(/(\d+)h/)) ? parseInt(matches[1]) : 0;
            spentMinute = (matches = spentTimeText.match(/(\d+)m/)) ? parseInt(matches[1]) : 0;
            timeLog.spentTime = spentHour * 60 + spentMinute;
          }
          if (timeLog.date && timeLog.person) {
            timeLogs.push(timeLog);
          }
        }
        if (matches = clearLine.match(/(.*)[@＠][\\￥](.+)/i)) {
          profitLogs.push({
            noteGuid: note.guid,
            comment: matches[1],
            profit: parseInt(matches[2].replace(/,/g, ''))
          });
        }
      }
      return async.series([
        (function(_this) {
          return function(callback) {
            return core.db.timeLogs.remove({
              noteGuid: note.guid
            }, {
              multi: true
            }, function(err, numRemoved) {
              if (err) {
                return callback(err);
              }
              core.loggers.system.debug("Remove " + numRemoved + " timeLogs.");
              return callback();
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            return core.db.profitLogs.remove({
              noteGuid: note.guid
            }, {
              multi: true
            }, function(err, numRemoved) {
              if (err) {
                return callback(err);
              }
              core.loggers.system.debug("Remove " + numRemoved + " profitLogs.");
              return callback();
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            return core.db.timeLogs.insert(timeLogs, function(err, newDocs) {
              if (err) {
                return callback(err);
              }
              core.loggers.system.debug("Insert " + newDocs.length + " timeLogs.");
              return callback();
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            return core.db.profitLogs.insert(profitLogs, function(err, newDocs) {
              if (err) {
                return callback(err);
              }
              core.loggers.system.debug("Insert " + newDocs.length + " profitLogs.");
              return callback();
            });
          };
        })(this)
      ], (function(_this) {
        return function(err) {
          if (err) {
            callback(err);
          }
          return callback();
        };
      })(this));
    };

    return DataSource;

  })();

  module.exports = new DataSource();

}).call(this);

//# sourceMappingURL=data-source.js.map
