// Generated by CoffeeScript 1.9.3
(function() {
  var DataSource, Evernote, async, core,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  async = require('async');

  Evernote = require('evernote').Evernote;

  core = require('./core');

  DataSource = (function() {
    function DataSource() {
      this._parseNoteContent = bind(this._parseNoteContent, this);
      this._checkError = bind(this._checkError, this);
      this.findNotes = bind(this.findNotes, this);
    }


    /**
     * @public
     * @param {string} words
     * @param {function} callback
     */

    DataSource.prototype.findNotes = function(words, callback) {
      var noteFilter, noteStore, resultSpec;
      if (words == null) {
        words = null;
      }
      noteStore = core.client.getNoteStore();
      noteFilter = new Evernote.NoteFilter();
      if (words) {
        noteFilter.words = words;
      }
      resultSpec = new Evernote.NotesMetadataResultSpec();
      return noteStore.findNotesMetadata(noteFilter, 0, 100, resultSpec, (function(_this) {
        return function(err, notesMeta) {
          if (err) {
            return callback(err);
          }
          return async.eachSeries(notesMeta.notes, function(noteMeta, callback) {
            noteStore = core.client.getNoteStore();
            return noteStore.getNote(noteMeta.guid, true, false, false, false, function(err, note) {
              if (err) {
                return callback(err);
              }
              return core.db.notes.insert(note, function(err, newDoc) {
                if (err) {
                  return callback(err);
                }
                console.log("A note is loaded. guid=" + note.guid + " title=" + note.title);
                return callback();
              });
            });
          }, function(err) {
            if (err) {
              return callback(err);
            }
            return callback();
          });
        };
      })(this));
    };


    /**
     * @protected
     * @param {string} err
     */

    DataSource.prototype._checkError = function(err) {
      if (err) {
        console.error(err);
        return true;
      } else {
        return false;
      }
    };


    /**
     * @protected
     */

    DataSource.prototype._parseNoteContent = function(content) {
      var clearLine, i, len, line, logs, matches, profits, ref, results;
      profits = [];
      logs = [];
      content = content.replace(/\r\n|\r|\n|<br\/>|<\/div>|<\/ul>|<\/li>/g, '<>');
      ref = content.split('<>');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        clearLine = line.replace(/<[^>]*>/g, '');
        if (matches = clearLine.match(/(.*)[@��][\\��](.+)/i)) {
          results.push(true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return DataSource;

  })();

  module.exports = new DataSource();

}).call(this);

//# sourceMappingURL=data-source.js.map
