// Generated by CoffeeScript 1.9.3
(function() {
  var DataSource, Evernote, async, config, core,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  async = require('async');

  Evernote = require('evernote').Evernote;

  core = require('./core');

  config = require('../config');

  DataSource = (function() {
    function DataSource() {
      this._parseNote = bind(this._parseNote, this);
      this.reloadNotes = bind(this.reloadNotes, this);
    }


    /**
     * @public
     * @param {string} words
     * @param {function} callback
     */

    DataSource.prototype.reloadNotes = function(words, callback) {
      var noteFilter, noteStore, resultSpec;
      if (words == null) {
        words = null;
      }
      noteStore = core.client.getNoteStore();
      noteFilter = new Evernote.NoteFilter();
      if (words) {
        noteFilter.words = words;
      }
      resultSpec = new Evernote.NotesMetadataResultSpec();
      return noteStore.findNotesMetadata(noteFilter, 0, 100, resultSpec, (function(_this) {
        return function(err, notesMeta) {
          if (err) {
            return callback(err);
          }
          return async.eachSeries(notesMeta.notes, function(noteMeta, callback) {
            noteStore = core.client.getNoteStore();
            return noteStore.getNote(noteMeta.guid, true, false, false, false, function(err, note) {
              if (err) {
                return callback(err);
              }
              return core.db.notes.update({
                guid: note.guid
              }, note, {
                upsert: true
              }, function(err, numReplaced, newDoc) {
                if (err) {
                  return callback(err);
                }
                console.log("A note is loaded. guid=" + note.guid + " title=" + note.title);
                return _this._parseNote(note, callback);
              });
            });
          }, function(err) {
            if (err) {
              return callback(err);
            }
            return callback();
          });
        };
      })(this));
    };


    /**
     * @protected
     * @param {Object} note
     * @param {function} callback
     */

    DataSource.prototype._parseNote = function(note, callback) {
      var attributesText, clearLine, content, i, j, len, len1, line, matches, personText, profitLogs, ref, ref1, spentHour, spentMinute, spentTimeText, timeLog, timeLogs;
      content = note.content;
      timeLogs = [];
      profitLogs = [];
      content = content.replace(/\r\n|\r|\n|<br\/>|<\/div>|<\/ul>|<\/li>/g, '<>');
      ref = content.split('<>');
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        clearLine = line.replace(/<[^>]*>/g, '');
        console.log(clearLine);
        if (matches = clearLine.match(/(.*)[@＠](\d{2,4}[\/\-]\d{1,2}[\/\-]\d{1,2}.+)/)) {
          timeLog = {
            comment: matches[1],
            date: null,
            time: null,
            person: null,
            spentTime: null
          };
          attributesText = matches[2];
          if (matches = attributesText.match(/\d{2,4}[\/\-]\d{1,2}[\/\-]\d{1,2}/)) {
            timeLog.date = matches[0];
          }
          if (matches = attributesText.match(/\d{1,2}:\d{1,2}:\d{1,2}|\d{1,2}:\d{1,2}/)) {
            timeLog.time = matches[0];
          }
          ref1 = config.personTexts;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            personText = ref1[j];
            if (attributesText.indexOf(personText) !== -1) {
              timeLog.person = personText;
            }
          }
          if (matches = attributesText.match(/\d+h\d+m|\d+m|\d+h|\d+\.\d+h/i)) {
            spentTimeText = matches[0];
            spentHour = (matches = spentTimeText.match(/(\d+)h/)) ? parseInt(matches[1]) : 0;
            spentMinute = (matches = spentTimeText.match(/(\d+)m/)) ? parseInt(matches[1]) : 0;
            spentMinute += spentHour * 60;
            timeLog.spentTime = Math.floor(spentMinute / 60) + ':' + (spentMinute % 60);
          }
          if (timeLog.date && timeLog.person) {
            timeLogs.push(timeLog);
          }
        }
        if (matches = clearLine.match(/(.*)[@＠][\\￥](.+)/i)) {
          profitLogs.push({
            comment: matches[1],
            profit: matches[2].toInt()
          });
        }
      }
      console.log(JSON.stringify(timeLogs));
      console.log(JSON.stringify(profitLogs));
      return callback();
    };

    return DataSource;

  })();

  module.exports = new DataSource();

}).call(this);

//# sourceMappingURL=data-source.js.map
