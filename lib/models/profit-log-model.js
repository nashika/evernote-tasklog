// Generated by CoffeeScript 1.9.3
(function() {
  var MultiModel, ProfitLogModel, async, core,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  async = require('async');

  core = require('../core');

  MultiModel = require('./multi-model');

  ProfitLogModel = (function(superClass) {
    extend(ProfitLogModel, superClass);

    function ProfitLogModel() {
      this.parse = bind(this.parse, this);
      return ProfitLogModel.__super__.constructor.apply(this, arguments);
    }


    /**
     * @override
     */

    ProfitLogModel.prototype.PLURAL_NAME = 'profitLogs';


    /**
     * @override
     */

    ProfitLogModel.prototype.TITLE_FIELD = 'comment';


    /**
     * @override
     */

    ProfitLogModel.prototype.DEFAULT_LIMIT = 2000;

    ProfitLogModel.prototype.parse = function(note, lines, callback) {
      var i, len, line, matches, profitLogs;
      profitLogs = [];
      for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        if (matches = line.match(/(.*)[@＠][\\￥$＄](.+)/i)) {
          profitLogs.push({
            noteGuid: note.guid,
            comment: matches[1],
            profit: parseInt(matches[2].replace(/,/g, ''))
          });
        }
      }
      return async.waterfall([
        (function(_this) {
          return function(callback) {
            return core.users[_this._username].models.profitLogs.removeLocal({
              noteGuid: note.guid
            }, callback);
          };
        })(this), (function(_this) {
          return function(callback) {
            return core.users[_this._username].models.profitLogs.saveLocal(profitLogs, callback);
          };
        })(this)
      ], callback);
    };

    return ProfitLogModel;

  })(MultiModel);

  module.exports = ProfitLogModel;

}).call(this);

//# sourceMappingURL=profit-log-model.js.map
