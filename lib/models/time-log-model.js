// Generated by CoffeeScript 1.9.3
(function() {
  var MultiModel, TimeLogModel, async, core,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  async = require('async');

  core = require('../core');

  MultiModel = require('./multi-model');

  TimeLogModel = (function(superClass) {
    extend(TimeLogModel, superClass);

    function TimeLogModel() {
      this.parse = bind(this.parse, this);
      return TimeLogModel.__super__.constructor.apply(this, arguments);
    }


    /**
     * @override
     */

    TimeLogModel.prototype.PLURAL_NAME = 'timeLogs';


    /**
     * @override
     */

    TimeLogModel.prototype.TITLE_FIELD = 'comment';


    /**
     * @override
     */

    TimeLogModel.prototype.DEFAULT_LIMIT = 2000;

    TimeLogModel.prototype.parse = function(note, persons, lines, callback) {
      var attributesText, dateText, i, j, len, len1, line, matches, person, spentHour, spentMinute, spentTimeText, timeLog, timeLogs, timeText;
      timeLogs = [];
      for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        if (matches = line.match(/(.*)[@ï¼ ](\d{2,4}[\/\-]\d{1,2}[\/\-]\d{1,2}.+)/)) {
          timeLog = {
            noteGuid: note.guid,
            comment: matches[1],
            allDay: true,
            date: null,
            person: null,
            spentTime: null
          };
          attributesText = matches[2];
          dateText = (matches = attributesText.match(/\d{2,4}[\/\-]\d{1,2}[\/\-]\d{1,2}/)) ? matches[0] : '';
          timeText = (matches = attributesText.match(/\d{1,2}:\d{1,2}:\d{1,2}|\d{1,2}:\d{1,2}/)) ? matches[0] : '';
          timeLog.date = new Date(dateText + ' ' + timeText);
          if (timeText) {
            timeLog.allDay = false;
          }
          for (j = 0, len1 = persons.length; j < len1; j++) {
            person = persons[j];
            if (attributesText.indexOf(person.name) !== -1) {
              timeLog.person = person.name;
            }
          }
          if (matches = attributesText.match(/\d+h\d+m|\d+m|\d+h|\d+\.\d+h/i)) {
            spentTimeText = matches[0];
            spentHour = (matches = spentTimeText.match(/(\d+\.?\d*)h/)) ? parseFloat(matches[1]) : 0;
            spentMinute = (matches = spentTimeText.match(/(\d+\.?\d*)m/)) ? parseFloat(matches[1]) : 0;
            timeLog.spentTime = Math.round(spentHour * 60 + spentMinute);
          }
          if (timeLog.date && timeLog.person) {
            timeLogs.push(timeLog);
          }
        }
      }
      return async.waterfall([
        (function(_this) {
          return function(callback) {
            return core.users[_this._username].models.timeLogs.removeLocal({
              noteGuid: note.guid
            }, callback);
          };
        })(this), (function(_this) {
          return function(callback) {
            return core.users[_this._username].models.timeLogs.saveLocal(timeLogs, callback);
          };
        })(this)
      ], callback);
    };

    return TimeLogModel;

  })(MultiModel);

  module.exports = TimeLogModel;

}).call(this);

//# sourceMappingURL=time-log-model.js.map
