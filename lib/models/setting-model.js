// Generated by CoffeeScript 1.10.0
(function() {
  var Model, SettingModel, core, merge,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  merge = require('merge');

  core = require('../core');

  Model = require('./Model');

  SettingModel = (function(superClass) {
    extend(SettingModel, superClass);

    function SettingModel() {
      this.saveLocal = bind(this.saveLocal, this);
      this.loadLocal = bind(this.loadLocal, this);
      return SettingModel.__super__.constructor.apply(this, arguments);
    }


    /**
     * @override
     */

    SettingModel.prototype.PLURAL_NAME = 'settings';


    /**
     * @override
     */

    SettingModel.prototype.REQUIRE_USER = false;


    /**
     * @public
     * @param {string} key
     * @param {function} callback
     */

    SettingModel.prototype.loadLocal = function(key, callback) {
      var limit, query;
      core.loggers.system.debug("Load local " + this.PLURAL_NAME + " was started. key=" + key);
      if (key) {
        query = {
          _id: key
        };
        limit = 1;
      } else {
        query = {};
        limit = 0;
      }
      return this._datastore.find(query).sort({}).limit(limit).exec((function(_this) {
        return function(err, docs) {
          var doc, i, len, result;
          core.loggers.system.debug("Load local " + _this.PLURAL_NAME + " was " + (err ? 'failed' : 'succeed') + ". docs.length=" + docs.length);
          if (err) {
            return callback(err);
          }
          if (key) {
            result = docs.length === 0 ? null : docs[0].value;
          } else {
            result = {};
            for (i = 0, len = docs.length; i < len; i++) {
              doc = docs[i];
              result[doc._id] = doc.value;
            }
          }
          return callback(null, result);
        };
      })(this));
    };


    /**
     * @public
     * @param {Object} doc
     * @param {function} callback
     */

    SettingModel.prototype.saveLocal = function(key, value, callback) {
      var doc;
      doc = {
        _id: key,
        value: value
      };
      return this._datastore.update({
        _id: key
      }, doc, {
        upsert: true
      }, (function(_this) {
        return function(err, numReplaced, newDoc) {
          if (err) {
            return callback(err);
          }
          if (_this._username) {
            core.users[_this._username].settings[key] = value;
          } else {
            core.settings[key] = value;
          }
          core.loggers.system.debug("Upsert " + _this.PLURAL_NAME + " end. numReplaced=" + numReplaced);
          return callback();
        };
      })(this));
    };

    return SettingModel;

  })(Model);

  module.exports = SettingModel;

}).call(this);

//# sourceMappingURL=setting-model.js.map
