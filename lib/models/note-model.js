// Generated by CoffeeScript 1.9.3
(function() {
  var MultiModel, NoteModel, async, config, core, merge,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  async = require('async');

  merge = require('merge');

  core = require('../core');

  config = require('../../config');

  MultiModel = require('./multi-model');

  NoteModel = (function(superClass) {
    extend(NoteModel, superClass);

    function NoteModel() {
      this.s_findNotesMeta = bind(this.s_findNotesMeta, this);
      this.s_parseNote = bind(this.s_parseNote, this);
      this.s_loadRemote = bind(this.s_loadRemote, this);
      this.s_findLocalWithContent = bind(this.s_findLocalWithContent, this);
      this.s_findLocal = bind(this.s_findLocal, this);
      return NoteModel.__super__.constructor.apply(this, arguments);
    }


    /**
     * @override
     */

    NoteModel.prototype.PLURAL_NAME = 'notes';


    /**
     * @override
     */

    NoteModel.prototype.TITLE_FIELD = 'title';


    /**
     * @override
     */

    NoteModel.prototype.s_findLocal = function(query, callback) {
      merge(query, {
        deleted: null
      });
      return NoteModel.__super__.s_findLocal.call(this, query, callback);
    };


    /**
     * @public
     * @static
     * @param {Object} query
     * @param {function} callback
     */

    NoteModel.prototype.s_findLocalWithContent = function(query, callback) {
      return this.s_findLocal(query, (function(_this) {
        return function(err, notes) {
          var results;
          if (err) {
            return callback(err);
          }
          results = [];
          return async.eachSeries(notes, function(note, callback) {
            if (note.content) {
              results.push(note);
              return callback();
            } else {
              return _this.s_loadRemote(note.guid, function(err, loadNote) {
                if (err) {
                  return callback(err);
                }
                results.push(loadNote);
                return callback();
              });
            }
          }, function(err) {
            if (err) {
              return callback(err);
            }
            return callback(null, results);
          });
        };
      })(this));
    };


    /**
     * @public
     * @static
     * @param {string} guid
     * @param {function} callback
     */

    NoteModel.prototype.s_loadRemote = function(guid, callback) {
      var lastNote, noteStore;
      core.loggers.system.debug("Loading note from remote was started. guid=" + guid);
      noteStore = core.client.getNoteStore();
      lastNote = null;
      return async.waterfall([
        (function(_this) {
          return function(callback) {
            return noteStore.getNote(guid, true, false, false, false, callback);
          };
        })(this), (function(_this) {
          return function(note, callback) {
            core.loggers.system.debug("Loading note was succeed. guid=" + note.guid + " title=" + note.title);
            lastNote = note;
            core.loggers.system.debug("Saving note to local. guid=" + note.guid);
            return core.db.notes.update({
              guid: note.guid
            }, note, {
              upsert: true
            }, callback);
          };
        })(this), (function(_this) {
          return function() {
            var callback, i, newDoc, numReplaced;
            numReplaced = arguments[0], newDoc = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), callback = arguments[i++];
            core.loggers.system.debug("Saving note was succeed. guid=" + lastNote.guid + " numReplaced=" + numReplaced);
            return callback();
          };
        })(this), (function(_this) {
          return function(callback) {
            return _this.s_parseNote(lastNote, callback);
          };
        })(this)
      ], (function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          core.loggers.system.debug("Loading note from remote was finished. note is loaded. guid=" + lastNote.guid + " title=" + lastNote.title);
          return callback(null, lastNote);
        };
      })(this));
    };


    /**
     * @public
     * @static
     * @param {Object} note
     * @param {function} callback
     */

    NoteModel.prototype.s_parseNote = function(note, callback) {
      var attributesText, clearLine, content, dateText, i, j, len, len1, line, matches, person, profitLogs, ref, ref1, spentHour, spentMinute, spentTimeText, timeLog, timeLogs, timeText;
      content = note.content;
      timeLogs = [];
      profitLogs = [];
      content = content.replace(/\r\n|\r|\n|<br\/>|<\/div>|<\/ul>|<\/li>/g, '<>');
      ref = content.split('<>');
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        clearLine = line.replace(/<[^>]*>/g, '');
        if (matches = clearLine.match(/(.*)[@＠](\d{2,4}[\/\-]\d{1,2}[\/\-]\d{1,2}.+)/)) {
          timeLog = {
            noteGuid: note.guid,
            comment: matches[1],
            allDay: true,
            date: null,
            person: null,
            spentTime: null
          };
          attributesText = matches[2];
          dateText = (matches = attributesText.match(/\d{2,4}[\/\-]\d{1,2}[\/\-]\d{1,2}/)) ? matches[0] : '';
          timeText = (matches = attributesText.match(/\d{1,2}:\d{1,2}:\d{1,2}|\d{1,2}:\d{1,2}/)) ? matches[0] : '';
          timeLog.date = new Date(dateText + ' ' + timeText);
          if (timeText) {
            timeLog.allDay = false;
          }
          ref1 = config.persons;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            person = ref1[j];
            if (attributesText.indexOf(person) !== -1) {
              timeLog.person = person;
            }
          }
          if (matches = attributesText.match(/\d+h\d+m|\d+m|\d+h|\d+\.\d+h/i)) {
            spentTimeText = matches[0];
            spentHour = (matches = spentTimeText.match(/(\d+)h/)) ? parseInt(matches[1]) : 0;
            spentMinute = (matches = spentTimeText.match(/(\d+)m/)) ? parseInt(matches[1]) : 0;
            timeLog.spentTime = spentHour * 60 + spentMinute;
          }
          if (timeLog.date && timeLog.person) {
            timeLogs.push(timeLog);
          }
        }
        if (matches = clearLine.match(/(.*)[@＠][\\￥](.+)/i)) {
          profitLogs.push({
            noteGuid: note.guid,
            comment: matches[1],
            profit: parseInt(matches[2].replace(/,/g, ''))
          });
        }
      }
      return async.series([
        (function(_this) {
          return function(callback) {
            return core.db.timeLogs.remove({
              noteGuid: note.guid
            }, {
              multi: true
            }, function(err, numRemoved) {
              if (err) {
                return callback(err);
              }
              core.loggers.system.debug("Remove " + numRemoved + " timeLogs.");
              return callback();
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            return core.db.profitLogs.remove({
              noteGuid: note.guid
            }, {
              multi: true
            }, function(err, numRemoved) {
              if (err) {
                return callback(err);
              }
              core.loggers.system.debug("Remove " + numRemoved + " profitLogs.");
              return callback();
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            return core.db.timeLogs.insert(timeLogs, function(err, newDocs) {
              if (err) {
                return callback(err);
              }
              core.loggers.system.debug("Insert " + newDocs.length + " timeLogs.");
              return callback();
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            return core.db.profitLogs.insert(profitLogs, function(err, newDocs) {
              if (err) {
                return callback(err);
              }
              core.loggers.system.debug("Insert " + newDocs.length + " profitLogs.");
              return callback();
            });
          };
        })(this)
      ], (function(_this) {
        return function(err) {
          if (err) {
            callback(err);
          }
          return callback();
        };
      })(this));
    };


    /**
     * @public
     * @static
     */

    NoteModel.prototype.s_findNotesMeta = function(words, callback) {
      var noteFilter, noteStore, resultSpec;
      noteStore = core.client.getNoteStore();
      noteFilter = new Evernote.NoteFilter();
      if (words) {
        noteFilter.words = words;
      }
      resultSpec = new Evernote.NotesMetadataResultSpec();
      return noteStore.findNotesMetadata(noteFilter, 0, 100, resultSpec, (function(_this) {
        return function(err, notesMeta) {
          if (err) {
            return callback(err);
          }
          return callback(null, notesMeta.notes);
        };
      })(this));
    };

    return NoteModel;

  })(MultiModel);

  module.exports = NoteModel;

}).call(this);

//# sourceMappingURL=note-model.js.map
