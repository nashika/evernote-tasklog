// Generated by CoffeeScript 1.9.3
(function() {
  var Model, SingleModel, core, merge,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  merge = require('merge');

  core = require('../core');

  Model = require('./Model');

  SingleModel = (function(superClass) {
    extend(SingleModel, superClass);

    function SingleModel() {
      this.s_saveLocal = bind(this.s_saveLocal, this);
      this.s_loadLocal = bind(this.s_loadLocal, this);
      return SingleModel.__super__.constructor.apply(this, arguments);
    }


    /**
     * @const
     * @type {Object}
     */

    SingleModel.prototype.DEFAULT_DOC = {};


    /**
     * @protected
     * @static
     * @param {string} username
     * @param {function} callback
     */

    SingleModel.prototype.s_loadLocal = function(username, callback) {
      var limit, query, sort;
      query = {
        _id: 1
      };
      sort = {};
      limit = 1;
      core.loggers.system.debug("Load local " + this.PLURAL_NAME + " was started.");
      return core.users[username].db[this.PLURAL_NAME].find(query).sort(sort).limit(limit).exec((function(_this) {
        return function(err, docs) {
          core.loggers.system.debug("Load local " + _this.PLURAL_NAME + " was " + (err ? 'failed' : 'succeed') + ". docs.length=" + docs.length);
          if (err) {
            return callback(err);
          }
          if (docs.length === 0) {
            return callback(null, merge(true, _this.DEFAULT_DOC));
          } else {
            return callback(null, docs[0]);
          }
        };
      })(this));
    };


    /**
     * @protected
     * @static
     * @param {string} username
     * @param {Object} doc
     * @param {function} callback
     */

    SingleModel.prototype.s_saveLocal = function(username, doc, callback) {
      doc._id = 1;
      return core.users[username].db[this.PLURAL_NAME].update({
        _id: 1
      }, doc, {
        upsert: true
      }, (function(_this) {
        return function(err, numReplaced, newDoc) {
          if (err) {
            return callback(err);
          }
          core.loggers.system.debug("Upsert " + _this.PLURAL_NAME + " end. numReplaced=" + numReplaced);
          return callback();
        };
      })(this));
    };

    return SingleModel;

  })(Model);

  module.exports = SingleModel;

}).call(this);

//# sourceMappingURL=single-model.js.map
