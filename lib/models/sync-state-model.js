// Generated by CoffeeScript 1.9.3
(function() {
  var Model, SyncStateModel, core,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  core = require('../core');

  Model = require('./model');

  SyncStateModel = (function(superClass) {
    extend(SyncStateModel, superClass);

    function SyncStateModel() {
      this.s_saveLocal = bind(this.s_saveLocal, this);
      this.s_loadLocal = bind(this.s_loadLocal, this);
      this.s_loadRemote = bind(this.s_loadRemote, this);
      return SyncStateModel.__super__.constructor.apply(this, arguments);
    }


    /**
     * @public
     * @static
     * @param {function} callback
     */

    SyncStateModel.prototype.s_loadRemote = function(callback) {
      var noteStore;
      noteStore = core.client.getNoteStore();
      return noteStore.getSyncState((function(_this) {
        return function(err, syncState) {
          if (err) {
            return callback(err);
          }
          return callback(null, syncState);
        };
      })(this));
    };


    /**
     * @protected
     * @param {function} callback
     */

    SyncStateModel.prototype.s_loadLocal = function(callback) {
      return core.db.syncStates.find({
        _id: 1
      }, (function(_this) {
        return function(err, docs) {
          if (err) {
            return callback(err);
          }
          if (docs.length === 0) {
            return callback(null, {
              updateCount: 0
            });
          } else {
            return callback(null, docs[0]);
          }
        };
      })(this));
    };


    /**
     * @protected
     * @param {Object} syncState
     * @param {function} callback
     */

    SyncStateModel.prototype.s_saveLocal = function(syncState, callback) {
      syncState._id = 1;
      return core.db.syncStates.update({
        _id: 1
      }, syncState, {
        upsert: true
      }, (function(_this) {
        return function(err, numReplaced, newDoc) {
          if (err) {
            return callback(err);
          }
          core.loggers.system.debug("Set client sync state update count to " + syncState.updateCount);
          return callback();
        };
      })(this));
    };

    return SyncStateModel;

  })(Model);

  module.exports = SyncStateModel;

}).call(this);

//# sourceMappingURL=sync-state-model.js.map
