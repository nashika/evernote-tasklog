// Generated by CoffeeScript 1.9.3
(function() {
  var Datastore, Evernote, LinkedNotebookModel, NoteModel, NotebookModel, SearchModel, SyncStateModel, TagModel, Www, async, config, core, log4js,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  async = require('async');

  log4js = require('log4js');

  Evernote = require('evernote').Evernote;

  Datastore = require('nedb');

  core = require('./core');

  config = require('../config');

  SyncStateModel = require('./models/sync-state-model');

  NoteModel = require('./models/note-model');

  NotebookModel = require('./models/notebook-model');

  TagModel = require('./models/tag-model');

  SearchModel = require('./models/search-model');

  LinkedNotebookModel = require('./models/linked-notebook-model');

  Www = (function() {
    function Www() {
      this.sync = bind(this.sync, this);
    }

    Www.prototype.SYNC_CHUNK_COUNT = 3;


    /**
     * @public
     */

    Www.prototype.main = function(app, server) {
      log4js.configure('../log4js-config.json', {
        cwd: '../'
      });
      core.loggers.system = log4js.getLogger('system');
      core.loggers.access = log4js.getLogger('access');
      core.loggers.error = log4js.getLogger('error');
      core.app = app;
      core.server = server;
      core.www = this;
      core.app.locals.core = core;
      core.client = new Evernote.Client({
        token: config.developerToken,
        sandbox: config.sandbox
      });
      return async.waterfall([
        (function(_this) {
          return function(callback) {
            var userStore;
            userStore = core.client.getUserStore();
            return userStore.getUser(callback);
          };
        })(this), (function(_this) {
          return function(user, callback) {
            core.user = user;
            return callback();
          };
        })(this), (function(_this) {
          return function(callback) {
            var dbPath;
            dbPath = __dirname + '/../db/' + core.user.username + '/';
            core.db.syncStates = new Datastore({
              filename: dbPath + 'sync-states.db',
              autoload: true
            });
            core.db.notes = new Datastore({
              filename: dbPath + 'notes.db',
              autoload: true
            });
            core.db.notebooks = new Datastore({
              filename: dbPath + 'notebooks.db',
              autoload: true
            });
            core.db.tags = new Datastore({
              filename: dbPath + 'tags.db',
              autoload: true
            });
            core.db.searches = new Datastore({
              filename: dbPath + 'searches.db',
              autoload: true
            });
            core.db.linkedNotebooks = new Datastore({
              filename: dbPath + 'linked-notebooks.db',
              autoload: true
            });
            core.db.timeLogs = new Datastore({
              filename: dbPath + 'time-logs.db',
              autoload: true
            });
            core.db.profitLogs = new Datastore({
              filename: dbPath + 'profit-logs.db',
              autoload: true
            });
            return callback();
          };
        })(this), (function(_this) {
          return function(callback) {
            return _this.sync(callback);
          };
        })(this)
      ], (function(_this) {
        return function(err) {
          if (err) {
            return core.loggers.error.error(err);
          }
          return core.loggers.system.info('Done');
        };
      })(this));
    };


    /**
     * @public
     * @param {function} callback
     */

    Www.prototype.sync = function(callback) {
      var lastSyncChunk, localSyncState, noteStore, remoteSyncState;
      noteStore = core.client.getNoteStore();
      localSyncState = null;
      remoteSyncState = null;
      lastSyncChunk = null;
      return async.waterfall([
        (function(_this) {
          return function(callback) {
            return SyncStateModel.prototype.s_loadLocal(callback);
          };
        })(this), (function(_this) {
          return function(syncState, callback) {
            localSyncState = syncState;
            return callback();
          };
        })(this), (function(_this) {
          return function(callback) {
            return SyncStateModel.prototype.s_loadRemote(callback);
          };
        })(this), (function(_this) {
          return function(syncState, callback) {
            remoteSyncState = syncState;
            return callback();
          };
        })(this), (function(_this) {
          return function(callback) {
            core.loggers.system.info("Sync start. localUSN=" + localSyncState.updateCount + " remoteUSN=" + remoteSyncState.updateCount);
            return async.whilst((function() {
              return localSyncState.updateCount < remoteSyncState.updateCount;
            }), function(callback) {
              var syncChunkFilter;
              core.loggers.system.info("Get sync chunk start. startUSN=" + localSyncState.updateCount);
              syncChunkFilter = new Evernote.SyncChunkFilter();
              syncChunkFilter.includeNotes = true;
              syncChunkFilter.includeNotebooks = true;
              syncChunkFilter.includeTags = true;
              syncChunkFilter.includeSearches = true;
              syncChunkFilter.includeExpunged = true;
              return async.waterfall([
                function(callback) {
                  return noteStore.getFilteredSyncChunk(localSyncState.updateCount, _this.SYNC_CHUNK_COUNT, syncChunkFilter, callback);
                }, function(syncChunk, callback) {
                  lastSyncChunk = syncChunk;
                  return callback();
                }, function(callback) {
                  return NoteModel.prototype.s_saveLocal(lastSyncChunk.notes, callback);
                }, function(callback) {
                  return NoteModel.prototype.s_removeLocal(lastSyncChunk.expungedNotes, callback);
                }, function(callback) {
                  localSyncState.updateCount = lastSyncChunk.chunkHighUSN;
                  return callback();
                }, function(callback) {
                  return SyncStateModel.prototype.s_saveLocal(localSyncState, callback);
                }, function(callback) {
                  core.loggers.system.info("Get sync chunk end. endUSN=" + localSyncState.updateCount);
                  return callback();
                }
              ], callback);
            }, function(err) {
              if (err) {
                return callback(err);
              }
              core.loggers.system.info("Sync end. localUSN=" + localSyncState.updateCount + " remoteUSN=" + remoteSyncState.updateCount);
              return callback();
            });
          };
        })(this)
      ], callback);
    };

    return Www;

  })();

  module.exports = new Www();

}).call(this);

//# sourceMappingURL=www.js.map
