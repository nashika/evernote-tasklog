// Generated by CoffeeScript 1.10.0
(function() {
  var NoteQueryService, merge,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  merge = require('merge');

  NoteQueryService = (function() {

    /**
     * @public
     * @type {number}
     */
    NoteQueryService.prototype.updated = 3;


    /**
     * @public
     * @type {Array}
     */

    NoteQueryService.prototype.notebooks = null;


    /**
     * @public
     * @type {Array}
     */

    NoteQueryService.prototype.stacks = null;


    /**
     * @public
     * @type {number}
     */

    NoteQueryService.prototype.count = null;


    /**
     * @constructor
     * @param {SyncDataService} syncData
     */

    function NoteQueryService(dataStore) {
      this.dataStore = dataStore;
      this.query = bind(this.query, this);
    }


    /**
     * @public
     * @return {Object}
     */

    NoteQueryService.prototype.query = function() {
      var i, j, len, len1, notebook, notebookGuid, notebooksArray, notebooksHash, ref, ref1, ref2, result, stack;
      result = {};
      if (this.updated) {
        merge(result, {
          updated: {
            $gte: parseInt(moment().startOf('day').subtract(this.updated, 'days').format('x'))
          }
        });
      }
      notebooksHash = {};
      if (this.notebooks && this.notebooks.length > 0) {
        ref = this.notebooks;
        for (i = 0, len = ref.length; i < len; i++) {
          notebookGuid = ref[i];
          notebooksHash[notebookGuid] = true;
        }
      }
      if (this.stacks && this.stacks.length > 0) {
        ref1 = this.stacks;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          stack = ref1[j];
          ref2 = this.dataStore.notebooks;
          for (notebookGuid in ref2) {
            notebook = ref2[notebookGuid];
            if (stack === notebook.stack) {
              notebooksHash[notebook.guid] = true;
            }
          }
        }
      }
      notebooksArray = Object.keys(notebooksHash);
      if (notebooksArray.length > 0) {
        merge(result, {
          notebookGuid: {
            $in: notebooksArray
          }
        });
      }
      return result;
    };

    return NoteQueryService;

  })();

  app.service('noteQuery', ['dataStore', NoteQueryService]);

  module.exports = NoteQueryService;

}).call(this);

//# sourceMappingURL=note-query.js.map
