// Generated by CoffeeScript 1.9.3
(function() {
  var SettingsController, async,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  async = require('async');

  SettingsController = (function() {
    SettingsController.prototype.FIELDS = {
      persons: {
        reParse: true,
        reload: true
      },
      startWorkingTime: {
        heading: 'Start Working Time',
        type: 'number'
      },
      endWorkingTime: {
        heading: 'End Working Time',
        type: 'number'
      }
    };

    SettingsController.prototype.editStore = {};

    function SettingsController($scope, $http, dataStore, dataTransciever, progress) {
      var field, key, ref;
      this.$scope = $scope;
      this.$http = $http;
      this.dataStore = dataStore;
      this.dataTransciever = dataTransciever;
      this.progress = progress;
      this._onSubmit = bind(this._onSubmit, this);
      this._onWatchSetting = bind(this._onWatchSetting, this);
      this._onWatchPersons = bind(this._onWatchPersons, this);
      this._add = bind(this._add, this);
      this._remove = bind(this._remove, this);
      this._down = bind(this._down, this);
      this._up = bind(this._up, this);
      this.$scope.dataStore = this.dataStore;
      this.$scope.fields = this.FIELDS;
      this.$scope.editStore = this.editStore;
      this.$scope.up = this._up;
      this.$scope.down = this._down;
      this.$scope.remove = this._remove;
      this.$scope.add = this._add;
      this.$scope.submit = this._onSubmit;
      this.$scope.$watchCollection('dataStore.settings.persons', this._onWatchPersons);
      ref = this.FIELDS;
      for (key in ref) {
        field = ref[key];
        this.$scope.$watch("dataStore.settings." + key, this._onWatchSetting(key));
      }
    }

    SettingsController.prototype._up = function(index) {
      if (index === 0) {
        return;
      }
      return this.$scope.editStore.persons.splice(index - 1, 2, this.$scope.editStore.persons[index], this.$scope.editStore.persons[index - 1]);
    };

    SettingsController.prototype._down = function(index) {
      if (index >= this.$scope.editStore.persons.length - 1) {
        return;
      }
      return this.$scope.editStore.persons.splice(index, 2, this.$scope.editStore.persons[index + 1], this.$scope.editStore.persons[index]);
    };

    SettingsController.prototype._remove = function(index) {
      return this.$scope.editStore.persons.splice(index, 1);
    };

    SettingsController.prototype._add = function() {
      return this.$scope.editStore.persons.push({
        name: "Person " + (this.$scope.editStore.persons.length + 1)
      });
    };

    SettingsController.prototype._onWatchPersons = function() {
      var ref;
      if ((ref = this.dataStore.settings) != null ? ref.persons : void 0) {
        return this.$scope.editStore.persons = this.dataStore.settings.persons;
      }
    };

    SettingsController.prototype._onWatchSetting = function(key) {
      return (function(_this) {
        return function() {
          var ref;
          return _this.editStore[key] = angular.copy((ref = _this.dataStore.settings) != null ? ref[key] : void 0);
        };
      })(this);
    };

    SettingsController.prototype._onSubmit = function() {
      var count, reParse, reload;
      this.progress.open();
      count = 0;
      reParse = false;
      reload = false;
      return async.forEachOfSeries(this.FIELDS, (function(_this) {
        return function(field, key, callback) {
          if (JSON.stringify(_this.editStore[key]) === JSON.stringify(_this.dataStore.settings[key])) {
            return callback();
          }
          console.log(key);
          if (field.reParse) {
            reParse = true;
          }
          if (field.reload) {
            reload = true;
          }
          _this.progress.set("Saving " + key + "...", count++ / Object.keys(_this.FIELDS).count * 100);
          return _this.$http.put('/settings/save', {
            key: key,
            value: _this.editStore[key]
          }).success(function() {
            _this.dataStore.settings[key] = _this.editStore[key];
            return callback();
          }).error(function() {
            return callback("Error saving " + key);
          });
        };
      })(this), (function(_this) {
        return function(err) {
          if (err) {
            alert(err);
          }
          _this.progress.close();
          return async.waterfall([
            function(callback) {
              if (reParse) {
                console.log('reParse');
                return _this.dataTransciever.reParse(callback);
              } else {
                return callback();
              }
            }, function(callback) {
              if (reload) {
                console.log('reload');
                return _this.dataTransciever.reload(callback);
              } else {
                return callback();
              }
            }
          ]);
        };
      })(this));
    };

    return SettingsController;

  })();

  app.controller('SettingsController', ['$scope', '$http', 'dataStore', 'dataTransciever', 'progress', SettingsController]);

  module.exports = SettingsController;

}).call(this);

//# sourceMappingURL=settings-controller.js.map
