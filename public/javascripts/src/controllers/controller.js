// Generated by CoffeeScript 1.9.3
(function() {
  var Controller, async,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  async = require('async');

  Controller = (function() {
    function Controller($scope, $rootScope, $http, $modal, viewUtil) {
      this.$scope = $scope;
      this.$rootScope = $rootScope;
      this.$http = $http;
      this.$modal = $modal;
      this.viewUtil = viewUtil;
      this.reload = bind(this.reload, this);
      this.$rootScope.persons = {};
      this.$rootScope.notes = {};
      this.$rootScope.timeLogs = {};
      this.$scope.reload = this.reload;
      this.reload((function(_this) {
        return function() {};
      })(this));
    }

    Controller.prototype.reload = function(callback) {
      var modalInstance;
      if (!callback) {
        callback = (function(_this) {
          return function() {};
        })(this);
      }
      modalInstance = this.$modal.open({
        templateUrl: 'progress.html',
        backdrop: 'static',
        keyboard: false,
        size: 'sm',
        animation: false
      });
      return async.series([
        (function(_this) {
          return function(callback) {
            return _this.$http.get('/sync').success(function() {
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            return _this.$http.get('/persons').success(function(data) {
              var i, len, person;
              _this.$rootScope.persons = {};
              for (i = 0, len = data.length; i < len; i++) {
                person = data[i];
                _this.$rootScope.persons[person] = person;
              }
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            return _this.$http.get('/notes', {
              params: {
                query: {},
                content: true
              }
            }).success(function(data) {
              var i, len, note;
              _this.$rootScope.notes = {};
              for (i = 0, len = data.length; i < len; i++) {
                note = data[i];
                _this.$rootScope.notes[note.guid] = note;
              }
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            return _this.$http({
              method: 'GET',
              url: '/time-logs'
            }).success(function(data) {
              var base, i, len, name, timeLog;
              _this.$rootScope.timeLogs = {};
              for (i = 0, len = data.length; i < len; i++) {
                timeLog = data[i];
                if ((base = _this.$rootScope.timeLogs)[name = timeLog.noteGuid] == null) {
                  base[name] = {};
                }
                _this.$rootScope.timeLogs[timeLog.noteGuid][timeLog._id] = timeLog;
              }
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this)
      ], (function(_this) {
        return function(err) {
          modalInstance.close();
          if (err) {
            throw new Error(err);
          }
          return callback(err);
        };
      })(this));
    };

    return Controller;

  })();

  app.controller('Controller', ['$scope', '$rootScope', '$http', '$modal', 'viewUtil', Controller]);

  module.exports = Controller;

}).call(this);

//# sourceMappingURL=controller.js.map
