// Generated by CoffeeScript 1.10.0
(function() {
  var TimelineController, async,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  async = require('async');

  TimelineController = (function() {
    function TimelineController($scope, $filter, $http, dataStore) {
      var container, end, options, start;
      this.$scope = $scope;
      this.$filter = $filter;
      this.$http = $http;
      this.dataStore = dataStore;
      this._onResize = bind(this._onResize, this);
      this._onWatchWorkingTime = bind(this._onWatchWorkingTime, this);
      this._onWatchPersons = bind(this._onWatchPersons, this);
      this._onRangeChanged = bind(this._onRangeChanged, this);
      this.$scope.dataStore = this.dataStore;
      this.$scope.timelineItems = new vis.DataSet();
      this.$scope.timelineGroups = new vis.DataSet();
      this.$scope.start = null;
      this.$scope.end = null;
      start = moment().startOf('day');
      end = moment().endOf('day');
      container = document.getElementById('timeline');
      options = {
        margin: {
          item: 5
        },
        height: window.innerHeight - 80,
        orientation: {
          axis: 'both',
          item: 'top'
        },
        start: start,
        end: end,
        order: function(a, b) {
          return a.start - b.start;
        }
      };
      this.$scope.timeline = new vis.Timeline(container, this.$scope.timelineItems, this.$scope.timelineGroups, options);
      this.$scope.timeline.on('rangechanged', this._onRangeChanged);
      this.$scope.$watchCollection('dataStore.settings.persons', this._onWatchPersons);
      this.$scope.$watchGroup(['dataStore.settings.startWorkingTime', 'dataStore.settings.endWorkingTime'], this._onWatchWorkingTime);
      this.$scope.$on('resize::resize', this._onResize);
      this._onRangeChanged({
        start: start,
        end: end
      });
    }

    TimelineController.prototype._onRangeChanged = function(properties) {
      var end, notes, start;
      start = moment(properties.start).startOf('day');
      end = moment(properties.end).endOf('day');
      if (start.isSameOrAfter(this.$scope.start) && end.isSameOrBefore(this.$scope.end)) {
        return;
      }
      if (!this.$scope.start || start.isBefore(this.$scope.start)) {
        this.$scope.start = start;
      }
      if (!this.$scope.end || end.isAfter(this.$scope.end)) {
        this.$scope.end = end;
      }
      this.$scope.timelineItems.clear();
      notes = {};
      return async.series([
        (function(_this) {
          return function(callback) {
            return _this.$http.get('/notes', {
              params: {
                query: {
                  updated: {
                    $gte: _this.$scope.start.valueOf()
                  }
                }
              }
            }).success(function(data) {
              var i, len, note;
              for (i = 0, len = data.length; i < len; i++) {
                note = data[i];
                notes[note.guid] = note;
                _this.$scope.timelineItems.add({
                  id: note.guid,
                  group: 'updated',
                  content: "<a href=\"evernote:///view/" + _this.dataStore.user.id + "/" + _this.dataStore.user.shardId + "/" + note.guid + "/" + note.guid + "/\" title=\"" + note.title + "\">" + (_this.$filter('abbreviate')(note.title, 40)) + "</a>",
                  start: new Date(note.updated),
                  type: 'point'
                });
              }
              return callback();
            }).error(function() {
              return callback('Error $http request');
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            return _this.$http.get('/time-logs', {
              params: {
                query: {
                  date: {
                    $gte: _this.$scope.start.valueOf(),
                    $lte: _this.$scope.end.valueOf()
                  }
                }
              }
            }).success(function(data) {
              var i, len, noteTitle, timeLog;
              for (i = 0, len = data.length; i < len; i++) {
                timeLog = data[i];
                noteTitle = notes[timeLog.noteGuid].title;
                _this.$scope.timelineItems.add({
                  id: timeLog._id,
                  group: timeLog.person,
                  content: "<a href=\"evernote:///view/" + _this.dataStore.user.id + "/" + _this.dataStore.user.shardId + "/" + timeLog.noteGuid + "/" + timeLog.noteGuid + "/\" title=\"" + noteTitle + " " + timeLog.comment + "\">" + (_this.$filter('abbreviate')(noteTitle, 20)) + " " + (_this.$filter('abbreviate')(timeLog.comment, 20)) + "</a>",
                  start: moment(timeLog.date),
                  end: timeLog.spentTime ? moment(timeLog.date).add(timeLog.spentTime, 'minutes') : null,
                  type: timeLog.spentTime ? 'range' : 'point'
                });
              }
              return callback();
            }).error(function() {
              return callback('Error $http request');
            });
          };
        })(this)
      ]);
    };

    TimelineController.prototype._onWatchPersons = function() {
      var i, index, len, person, ref, ref1;
      if (!((ref = this.dataStore.settings) != null ? ref.persons : void 0)) {
        return;
      }
      this.$scope.timelineGroups.clear();
      ref1 = this.dataStore.settings.persons;
      for (index = i = 0, len = ref1.length; i < len; index = ++i) {
        person = ref1[index];
        this.$scope.timelineGroups.add({
          id: person.name,
          content: person.name
        });
      }
      return this.$scope.timelineGroups.add({
        id: 'updated',
        content: 'Update'
      });
    };

    TimelineController.prototype._onWatchWorkingTime = function() {
      var ref, ref1;
      if (((ref = this.dataStore.settings) != null ? ref.startWorkingTime : void 0) && ((ref1 = this.dataStore.settings) != null ? ref1.endWorkingTime : void 0)) {
        return this.$scope.timeline.setOptions({
          hiddenDates: [
            {
              start: moment().subtract(1, 'days').startOf('day').hour(this.dataStore.settings.endWorkingTime),
              end: moment().startOf('day').hour(this.dataStore.settings.startWorkingTime),
              repeat: 'daily'
            }
          ]
        });
      } else {
        return this.$scope.timeline.setOptions({
          hiddenDates: {}
        });
      }
    };

    TimelineController.prototype._onResize = function(event) {
      return this.$scope.timeline.setOptions({
        height: window.innerHeight - 90
      });
    };

    return TimelineController;

  })();

  app.controller('TimelineController', ['$scope', '$filter', '$http', 'dataStore', TimelineController]);

  module.exports = TimelineController;

}).call(this);

//# sourceMappingURL=timeline-controller.js.map
