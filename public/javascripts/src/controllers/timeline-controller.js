// Generated by CoffeeScript 1.9.3
(function() {
  var TimelineController, async,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  async = require('async');

  TimelineController = (function() {
    function TimelineController($scope) {
      var container, options;
      this.$scope = $scope;
      this._onWatchProfitLogs = bind(this._onWatchProfitLogs, this);
      this._onWatchTimeLogs = bind(this._onWatchTimeLogs, this);
      this._onWatchNotes = bind(this._onWatchNotes, this);
      this._onWatchPersons = bind(this._onWatchPersons, this);
      this.$scope.timelineItems = new vis.DataSet();
      this.$scope.timelineGroups = new vis.DataSet();
      container = document.getElementById('timeline');
      options = {
        margin: {
          item: 2
        }
      };
      this.$scope.timeline = new vis.Timeline(container, this.$scope.timelineItems, this.$scope.timelineGroups, options);
      this.$scope.$watchCollection('persons', this._onWatchPersons);
      this.$scope.$watchCollection('notes', this._onWatchNotes);
      this.$scope.$watchCollection('timeLogs', this._onWatchTimeLogs);
      this.$scope.$watchCollection('profitLogs', this._onWatchProfitLogs);
    }

    TimelineController.prototype._onWatchPersons = function(newPersons, oldPersons) {
      var key, person, results;
      this.$scope.timelineGroups.clear();
      this.$scope.timelineGroups.add({
        id: 'updated',
        content: 'Note Updated'
      });
      results = [];
      for (key in newPersons) {
        person = newPersons[key];
        results.push(this.$scope.timelineGroups.add({
          id: key,
          content: person
        }));
      }
      return results;
    };

    TimelineController.prototype._onWatchNotes = function(newNotes, oldNotes) {
      var guid, note, results;
      for (guid in oldNotes) {
        note = oldNotes[guid];
        this.$scope.timelineItems.remove(guid);
      }
      results = [];
      for (guid in newNotes) {
        note = newNotes[guid];
        results.push(this.$scope.timelineItems.add({
          id: guid,
          group: 'updated',
          content: note.title,
          start: new Date(note.updated),
          type: 'point'
        }));
      }
      return results;
    };

    TimelineController.prototype._onWatchTimeLogs = function(newTimeLogs, oldTimeLogs) {
      var _id, end, noteGuid, noteTimeLogs, results, start, timeLog;
      for (noteGuid in oldTimeLogs) {
        noteTimeLogs = oldTimeLogs[noteGuid];
        for (_id in noteTimeLogs) {
          timeLog = noteTimeLogs[_id];
          this.$scope.timelineItems.remove(_id);
        }
      }
      results = [];
      for (noteGuid in newTimeLogs) {
        noteTimeLogs = newTimeLogs[noteGuid];
        results.push((function() {
          var results1;
          results1 = [];
          for (_id in noteTimeLogs) {
            timeLog = noteTimeLogs[_id];
            start = new Date(timeLog.date);
            if (timeLog.spentTime) {
              end = new Date(start);
              end.setMinutes(start.getMinutes() + timeLog.spentTime);
            } else {
              end = null;
            }
            results1.push(this.$scope.timelineItems.add({
              id: _id,
              group: timeLog.person,
              content: this.$scope.notes[timeLog.noteGuid].title + '<br>' + timeLog.comment,
              start: start,
              end: end
            }));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    TimelineController.prototype._onWatchProfitLogs = function(newProfitLogs, oldProfitLogs) {};

    return TimelineController;

  })();

  app.controller('TimelineController', ['$scope', TimelineController]);

  module.exports = TimelineController;

}).call(this);

//# sourceMappingURL=timeline-controller.js.map
