(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var Controller,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Controller = (function() {
    function Controller($scope, $rootScope, $http, progress, noteFilter) {
      this.$scope = $scope;
      this.$rootScope = $rootScope;
      this.$http = $http;
      this.progress = progress;
      this.noteFilter = noteFilter;
      this.reload = bind(this.reload, this);
      this.$rootScope.persons = {};
      this.$rootScope.notebooks = {};
      this.$rootScope.notes = {};
      this.$rootScope.timeLogs = {};
      this.$scope.reload = this.reload;
      this.reload((function(_this) {
        return function() {};
      })(this));
    }

    Controller.prototype.reload = function(callback) {
      var noteCount, query;
      if (!callback) {
        callback = (function(_this) {
          return function() {};
        })(this);
      }
      query = this.noteFilter.query();
      noteCount = 0;
      this.progress.open();
      return async.series([
        (function(_this) {
          return function(callback) {
            _this.progress.set('Syncing remote server.', 0);
            return _this.$http.get('/sync').success(function() {
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            _this.progress.set('Getting persons data.', 10);
            return _this.$http.get('/persons').success(function(data) {
              var i, len, person;
              _this.$rootScope.persons = {};
              for (i = 0, len = data.length; i < len; i++) {
                person = data[i];
                _this.$rootScope.persons[person] = person;
              }
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            _this.progress.set('Getting notebooks data.', 20);
            return _this.$http.get('/notebooks').success(function(data) {
              var i, len, notebook;
              _this.$rootScope.notebooks = {};
              for (i = 0, len = data.length; i < len; i++) {
                notebook = data[i];
                _this.$rootScope.notebooks[notebook.guid] = notebook;
              }
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            _this.progress.set('Getting notes count.', 30);
            return _this.$http.get('/notes/count', {
              params: {
                query: query
              }
            }).success(function(data) {
              noteCount = data;
              if (noteCount > 100) {
                if (window.confirm("Current query find " + noteCount + " notes. It is too many. Continue anyway?")) {
                  return callback();
                } else {
                  return callback('User Canceled');
                }
              } else {
                return callback();
              }
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            _this.progress.set('Request remote contents.', 40);
            return _this.$http.get('/notes/get-content', {
              params: {
                query: query
              }
            }).success(function(data) {
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            _this.progress.set('Getting notes.', 60);
            return _this.$http.get('/notes', {
              params: {
                query: query,
                content: false
              }
            }).success(function(data) {
              var i, len, note;
              _this.$rootScope.notes = {};
              for (i = 0, len = data.length; i < len; i++) {
                note = data[i];
                _this.$rootScope.notes[note.guid] = note;
              }
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            var guids, note, noteGuid;
            _this.progress.set('Getting time logs.', 80);
            guids = (function() {
              var ref, results;
              ref = this.$rootScope.notes;
              results = [];
              for (noteGuid in ref) {
                note = ref[noteGuid];
                results.push(note.guid);
              }
              return results;
            }).call(_this);
            return _this.$http.post('/time-logs', {
              query: {
                noteGuid: {
                  $in: guids
                }
              },
              limit: 300
            }).success(function(data) {
              var base, i, len, name, timeLog;
              _this.$rootScope.timeLogs = {};
              for (i = 0, len = data.length; i < len; i++) {
                timeLog = data[i];
                if ((base = _this.$rootScope.timeLogs)[name = timeLog.noteGuid] == null) {
                  base[name] = {};
                }
                _this.$rootScope.timeLogs[timeLog.noteGuid][timeLog._id] = timeLog;
              }
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this)
      ], (function(_this) {
        return function(err) {
          _this.progress.set('Done.', 100);
          _this.progress.close();
          if (err) {
            throw new Error(err);
          }
          return callback(err);
        };
      })(this));
    };

    return Controller;

  })();

  app.controller('Controller', ['$scope', '$rootScope', '$http', 'progress', 'noteFilter', Controller]);

  module.exports = Controller;

}).call(this);



},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var ModalController;

  ModalController = (function() {
    function ModalController($scope) {
      this.$scope = $scope;
    }

    return ModalController;

  })();

  app.controller('ModalController', ['$scope', ModalController]);

  module.exports = ModalController;

}).call(this);



},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var NavigationController;

  NavigationController = (function() {
    function NavigationController($scope, $route) {
      this.$scope = $scope;
      this.$route = $route;
      this.$scope.navCollapse = true;
      this.$scope.$route = this.$route;
    }

    return NavigationController;

  })();

  app.controller('NavigationController', ['$scope', '$route', NavigationController]);

  module.exports = NavigationController;

}).call(this);



},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var NotesController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  NotesController = (function() {
    function NotesController($scope) {
      this.$scope = $scope;
      this._onWatchTimeLogs = bind(this._onWatchTimeLogs, this);
      this._getSpentTime = bind(this._getSpentTime, this);
      this.$scope.noteSpentTimes = {};
      this.$scope.getSpentTime = this._getSpentTime;
      this.$scope.$watchCollection('timeLogs', this._onWatchTimeLogs);
    }

    NotesController.prototype._getSpentTime = function(noteGuid) {
      var hour, minute;
      if (!this.$scope.noteSpentTimes[noteGuid]) {
        return '0m';
      }
      hour = Math.floor(this.$scope.noteSpentTimes[noteGuid] / 60);
      minute = this.$scope.noteSpentTimes[noteGuid] % 60;
      if (hour) {
        return hour + 'h' + minute + 'm';
      }
      return minute + 'm';
    };

    NotesController.prototype._onWatchTimeLogs = function(timeLogs) {
      var name, noteGuid, noteSpentTimes, noteTimeLog, timeLog, timeLog_id;
      noteSpentTimes = {};
      for (noteGuid in timeLogs) {
        noteTimeLog = timeLogs[noteGuid];
        for (timeLog_id in noteTimeLog) {
          timeLog = noteTimeLog[timeLog_id];
          if (noteSpentTimes[name = timeLog.noteGuid] == null) {
            noteSpentTimes[name] = 0;
          }
          noteSpentTimes[timeLog.noteGuid] += timeLog.spentTime;
        }
      }
      return this.$scope.noteSpentTimes = noteSpentTimes;
    };

    return NotesController;

  })();

  app.controller('NotesController', ['$scope', NotesController]);

  module.exports = NotesController;

}).call(this);



},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var ModalController, ProgressModalController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ModalController = require('./modal-controller');

  ProgressModalController = (function(superClass) {
    extend(ProgressModalController, superClass);

    function ProgressModalController($scope, progress) {
      this.$scope = $scope;
      this.progress = progress;
      this.$scope.progress = this.progress;
    }

    return ProgressModalController;

  })(ModalController);

  app.controller('ProgressModalController', ['$scope', 'progress', ProgressModalController]);

  module.exports = ProgressModalController;

}).call(this);



},{"./modal-controller":2}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var SettingsController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SettingsController = (function() {
    SettingsController.prototype.lastQueryStr = null;

    function SettingsController($scope, $http, noteFilter) {
      this.$scope = $scope;
      this.$http = $http;
      this.noteFilter = noteFilter;
      this._onWatchNoteFilter = bind(this._onWatchNoteFilter, this);
      this.$scope.noteFilter = this.noteFilter;
      this.$scope.$watch('noteFilter', this._onWatchNoteFilter, true);
    }

    SettingsController.prototype._onWatchNoteFilter = function() {
      var query, queryStr;
      query = this.noteFilter.query();
      queryStr = JSON.stringify(query);
      if (this.lastQueryStr === queryStr) {
        return;
      }
      this.lastQueryStr = queryStr;
      console.log({
        query: query
      });
      return this.$http.get('/notes/count', {
        params: {
          query: query
        }
      }).success((function(_this) {
        return function(data) {
          return _this.noteFilter.count = data;
        };
      })(this)).error((function(_this) {
        return function(data) {
          return _this.noteFilter.count = null;
        };
      })(this));
    };

    return SettingsController;

  })();

  app.controller('SettingsController', ['$scope', '$http', 'noteFilter', SettingsController]);

  module.exports = SettingsController;

}).call(this);



},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var TimelineController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TimelineController = (function() {
    function TimelineController($scope) {
      var container, options;
      this.$scope = $scope;
      this._onResize = bind(this._onResize, this);
      this._onWatchProfitLogs = bind(this._onWatchProfitLogs, this);
      this._onWatchNotes = bind(this._onWatchNotes, this);
      this._onWatchPersons = bind(this._onWatchPersons, this);
      this.$scope.timelineItems = new vis.DataSet();
      this.$scope.timelineGroups = new vis.DataSet();
      container = document.getElementById('timeline');
      options = {
        margin: {
          item: 5
        },
        height: window.innerHeight - 80,
        orientation: {
          axis: 'both',
          item: 'top'
        }
      };
      this.$scope.timeline = new vis.Timeline(container, this.$scope.timelineItems, this.$scope.timelineGroups, options);
      this.$scope.$watchCollection('persons', this._onWatchPersons);
      this.$scope.$watchCollection('notes', this._onWatchNotes);
      this.$scope.$watchCollection('timeLogs', this._onWatchNotes);
      this.$scope.$watchCollection('profitLogs', this._onWatchProfitLogs);
      this.$scope.$on('resize::resize', this._onResize);
    }

    TimelineController.prototype._onWatchPersons = function() {
      var key, person, ref;
      this.$scope.timelineGroups.clear();
      ref = this.$scope.persons;
      for (key in ref) {
        person = ref[key];
        this.$scope.timelineGroups.add({
          id: key,
          content: person
        });
      }
      return this.$scope.timelineGroups.add({
        id: 'updated',
        content: 'Update'
      });
    };

    TimelineController.prototype._onWatchNotes = function() {
      var end, note, noteGuid, noteTimeLog, ref, ref1, results, start, timeLog, timeLogs_id;
      this.$scope.timelineItems.clear();
      ref = this.$scope.notes;
      for (noteGuid in ref) {
        note = ref[noteGuid];
        this.$scope.timelineItems.add({
          id: note.guid,
          group: 'updated',
          content: note.title,
          start: new Date(note.updated),
          type: 'point'
        });
      }
      ref1 = this.$scope.timeLogs;
      results = [];
      for (noteGuid in ref1) {
        noteTimeLog = ref1[noteGuid];
        results.push((function() {
          var results1;
          results1 = [];
          for (timeLogs_id in noteTimeLog) {
            timeLog = noteTimeLog[timeLogs_id];
            start = new Date(timeLog.date);
            if (timeLog.spentTime) {
              end = new Date(start);
              end.setMinutes(start.getMinutes() + timeLog.spentTime);
            } else {
              end = null;
            }
            results1.push(this.$scope.timelineItems.add({
              id: timeLog._id,
              group: timeLog.person,
              content: this.$scope.notes[timeLog.noteGuid].title + ' ' + timeLog.comment,
              start: start,
              end: end,
              type: end ? 'range' : 'point'
            }));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    TimelineController.prototype._onWatchProfitLogs = function() {};

    TimelineController.prototype._onResize = function(event) {
      return this.$scope.timeline.setOptions({
        height: window.innerHeight - 90
      });
    };

    return TimelineController;

  })();

  app.controller('TimelineController', ['$scope', TimelineController]);

  module.exports = TimelineController;

}).call(this);



},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  app.directive('resize', function($timeout, $rootScope, $window) {
    return {
      link: function() {
        var timer;
        timer = false;
        return angular.element($window).on('load resize', function(event) {
          if (timer) {
            $timeout.cancel(timer);
          }
          return timer = $timeout(function() {
            return $rootScope.$broadcast('resize::resize');
          }, 200);
        });
      }
    };
  });

}).call(this);



},{}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var checkItemMatches, filterByProperty;

  checkItemMatches = (function(_this) {
    return function(item, props) {
      var itemMatches, prop, text;
      itemMatches = false;
      for (prop in props) {
        text = props[prop];
        text = text.toLowerCase();
        if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
          itemMatches = true;
          break;
        }
      }
      return itemMatches;
    };
  })(this);

  filterByProperty = function() {
    return function(items, props) {
      var i, item, itemMatches, key, len, out;
      out = [];
      if (angular.isArray(items)) {
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          itemMatches = checkItemMatches(item, props);
          if (itemMatches) {
            out.push(item);
          }
        }
      } else if (angular.isObject(items)) {
        for (key in items) {
          item = items[key];
          itemMatches = checkItemMatches(item, props);
          if (itemMatches) {
            out.push(item);
          }
        }
      } else {
        out = items;
      }
      return out;
    };
  };

  app.filter('filterByProperty', filterByProperty);

  module.exports = filterByProperty;

}).call(this);



},{}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var orderObjectBy;

  orderObjectBy = function() {
    return function(items, field, reverse) {
      var filtered, results;
      if (field == null) {
        field = '$value';
      }
      if (reverse == null) {
        reverse = true;
      }
      filtered = [];
      angular.forEach(items, function(item, key) {
        return filtered.push({
          key: key,
          item: item
        });
      });
      filtered.sort(function(a, b) {
        if (field === '$key') {
          if (a.key > b.key) {
            return -1;
          } else {
            return 1;
          }
        }
        if (field === '$value') {
          if (a.item > b.item) {
            return -1;
          } else {
            return 1;
          }
        }
        if (typeof field === 'string') {
          if (a[field] > b[field]) {
            return -1;
          } else {
            return 1;
          }
        }
        if (typeof field === 'function') {
          if (field(a.item, a.key) > field(b.item, b.key)) {
            return -1;
          } else {
            return 1;
          }
        }
      });
      if (reverse) {
        filtered.reverse();
      }
      results = [];
      angular.forEach(filtered, function(item) {
        var result;
        result = item.item;
        result['$key'] = item.key;
        return results.push(result);
      });
      return results;
    };
  };

  app.filter('orderObjectBy', orderObjectBy);

  module.exports = orderObjectBy;

}).call(this);



},{}],11:[function(require,module,exports){
window.app = angular.module('App', ['ngRoute', 'ui.bootstrap', 'ngSanitize', 'ui.select']);

require('./route');

require('./filters/filter-by-property');

require('./filters/order-object-by');

require('./services/note-filter');

require('./services/progress');

require('./directives/resize');

require('./controllers/controller');

require('./controllers/navigation-controller');

require('./controllers/timeline-controller');

require('./controllers/notes-controller');

require('./controllers/settings-controller');

require('./controllers/progress-modal-controller');


},{"./controllers/controller":1,"./controllers/navigation-controller":3,"./controllers/notes-controller":4,"./controllers/progress-modal-controller":5,"./controllers/settings-controller":6,"./controllers/timeline-controller":7,"./directives/resize":8,"./filters/filter-by-property":9,"./filters/order-object-by":10,"./route":12,"./services/note-filter":13,"./services/progress":14}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  app.config([
    '$routeProvider', function($routeProvider) {
      return $routeProvider.when('/', {
        redirectTo: '/timeline'
      }).when('/timeline', {
        templateUrl: 'timeline'
      }).when('/notes', {
        templateUrl: 'notes'
      }).when('/settings', {
        templateUrl: 'settings'
      }).otherwise({
        redirectTo: '/'
      });
    }
  ]);

}).call(this);



},{}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var NoteFilterService,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  NoteFilterService = (function() {
    NoteFilterService.prototype.updated = 3;

    NoteFilterService.prototype.notebooks = null;

    NoteFilterService.prototype.count = null;

    function NoteFilterService() {
      this.query = bind(this.query, this);
    }

    NoteFilterService.prototype.query = function() {
      var result;
      result = {};
      if (this.updated) {
        merge(result, {
          updated: {
            $gte: parseInt(moment().startOf('day').subtract(this.updated, 'days').format('x'))
          }
        });
      }
      if (this.notebooks && this.notebooks.length > 0) {
        merge(result, {
          notebookGuid: {
            $in: this.notebooks
          }
        });
      }
      return result;
    };

    return NoteFilterService;

  })();

  app.service('noteFilter', [NoteFilterService]);

  module.exports = NoteFilterService;

}).call(this);



},{}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var ProgressService,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ProgressService = (function() {
    ProgressService.prototype.modalInstance = null;

    ProgressService.prototype.value = 0;

    ProgressService.prototype.message = '';

    function ProgressService($modal) {
      this.$modal = $modal;
      this.set = bind(this.set, this);
      this.close = bind(this.close, this);
      this.open = bind(this.open, this);
    }

    ProgressService.prototype.open = function() {
      this.message = 'processing...';
      this.value = 0;
      return this.modalInstance = this.$modal.open({
        templateUrl: 'progress-modal',
        controller: 'ProgressModalController',
        backdrop: 'static',
        keyboard: false,
        size: 'sm',
        animation: false
      });
    };

    ProgressService.prototype.close = function() {
      return this.modalInstance.close();
    };

    ProgressService.prototype.set = function(message, value) {
      if (value == null) {
        value = null;
      }
      this.message = message;
      if (value !== null) {
        return this.value = value;
      }
    };

    return ProgressService;

  })();

  app.service('progress', ['$modal', ProgressService]);

  module.exports = ProgressService;

}).call(this);



},{}]},{},[11])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
