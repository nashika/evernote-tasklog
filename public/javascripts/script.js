(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var Controller;

  Controller = (function() {
    function Controller($scope, viewUtil) {
      this.$scope = $scope;
      this.viewUtil = viewUtil;
    }

    return Controller;

  })();

  app.controller('Controller', ['$scope', 'viewUtil', Controller]);

  module.exports = Controller;

}).call(this);



},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var TimelineController;

  TimelineController = (function() {
    function TimelineController($scope) {
      var container, data, options, timeline;
      this.$scope = $scope;
      container = document.getElementById('timeline');
      data = [
        {
          id: 1,
          content: 'item 1',
          start: '2013-04-20'
        }, {
          id: 2,
          content: 'item 2',
          start: '2013-04-14'
        }, {
          id: 3,
          content: 'item 3',
          start: '2013-04-18'
        }, {
          id: 4,
          content: 'item 4',
          start: '2013-04-16',
          end: '2013-04-19'
        }, {
          id: 5,
          content: 'item 5',
          start: '2013-04-25'
        }, {
          id: 6,
          content: 'item 6',
          start: '2013-04-27'
        }
      ];
      options = {};
      timeline = new vis.Timeline(container, data, options);
    }

    return TimelineController;

  })();

  app.controller('TimelineController', ['$scope', TimelineController]);

  module.exports = TimelineController;

}).call(this);



},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  app.factory('viewUtil', function() {
    var viewUtil;
    viewUtil = {
      getDate: function(datetime) {
        var date;
        date = new Date(datetime);
        return date.getFullYear() + '/' + date.getMonth() + '/' + date.getDate();
      },
      getTime: function(datetime) {
        var date;
        date = new Date(datetime);
        return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
      },
      parseNoteContent: function(content) {
        var clearLine, i, len, line, logs, profits, ref, results;
        profits = [];
        logs = [];
        content = content.replace(/\r\n|\r|\n|<br\/>|<\/div>|<\/ul>|<\/li>/g, '<>');
        ref = content.split('<>');
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          line = ref[i];
          results.push(clearLine = line.replace(/<[^>]*>/g, ''));
        }
        return results;

        /*
            regExpProfit.Pattern = "[@��](\\|��)"
            regExpProfit.IgnoreCase = True
            regExpLog.Pattern = "[@��](\d{2,4}/\d{1,2}/\d{1,2})"
            regExpDate.Pattern = "\d{2,4}/\d{1,2}/\d{1,2}"
            regExpTime.Pattern = "\d{1,2}:\d{1,2}:\d{1,2}|\d{1,2}:\d{1,2}"
            regExpSpentTime.Pattern = "\d+h\d+m|\d+m|\d+h|\d+\.\d+h"
            regExpSpentTime.IgnoreCase = True
        
            For Each line In Split(content, "<>")
        
                '���v�������̉���
                Set lineMatchs = regExpProfit.Execute(clearLine)
                If lineMatchs.count > 0 Then
                    Set attributes = New Dictionary
                    Set lineMatch = lineMatchs.Item(0)
                    '�R�����g�̎擾
                    If lineMatch.FirstIndex > 0 Then
                        attributes.Add "comment", Trim(Left(clearLine, lineMatch.FirstIndex - 1))
                    Else
                        attributes.Add "comment", ""
                    End If
                    '���v�z�̎擾
                    profitText = Trim(Mid(clearLine, lineMatch.FirstIndex + lineMatch.Length + 1))
                    attributes.Add "profit", Val(profitText)
                    myProfits.Add attributes
                End If
        
                '���O�������̉���
                Set lineMatchs = regExpLog.Execute(clearLine)
                If lineMatchs.count > 0 Then
                    Set attributes = New Dictionary
                    Set lineMatch = lineMatchs.Item(0)
                    '�R�����g�̎擾
                    If lineMatch.FirstIndex > 0 Then
                        attributes.Add "comment", Trim(Left(clearLine, lineMatch.FirstIndex - 1))
                    Else
                        attributes.Add "comment", ""
                    End If
                    '�R�����g�ȊO�̃e�L�X�g�擾
                    attributesText = Trim(Mid(clearLine, lineMatch.FirstIndex + 1))
                    '���t�̎擾
                    Set logMatchs = regExpDate.Execute(attributesText)
                    If logMatchs.count > 0 Then
                        attributes.Add "date", logMatchs.Item(0)
                    End If
                    '�����̎擾
                    Set logMatchs = regExpTime.Execute(attributesText)
                    If logMatchs.count > 0 Then
                        attributes.Add "time", logMatchs.Item(0)
                    End If
                    '�S���҂̎擾
                    Dim alias As Dictionary
                    Dim p As Variant
                    For Each p In myPersonAliases
                        Set alias = p
                        If InStr(attributesText, alias.Item("aliasName")) Then
                            attributes.Add "personId", alias.Item("personId")
                            attributes.Add "personAbbrName", alias.Item("abbrName")
                            Exit For
                        End If
                    Next
                    '���Ǝ��Ԃ̎擾
                    Set logMatchs = regExpSpentTime.Execute(attributesText)
                    If logMatchs.count > 0 Then
                        Dim sSpentTime As String
                        Dim sSpentHour As String
                        Dim sSpentMinute As String
                        Dim nSpentMinute As Integer
                        sSpentTime = LCase(logMatchs.Item(0))
                        nSpentMinute = 0
                        If InStr(sSpentTime, "h") > 0 Then
                            sSpentHour = Left(sSpentTime, InStr(sSpentTime, "h") - 1)
                            nSpentMinute = nSpentMinute + Round(sSpentHour * 60)
                        End If
                        If InStr(sSpentTime, "m") > 0 Then
                            If InStr(sSpentTime, "h") > 0 Then
                                sSpentMinute = Mid(sSpentTime, InStr(sSpentTime, "h") + 1)
                                sSpentMinute = Left(sSpentMinute, Len(sSpentMinute) - 1)
                            Else
                                sSpentMinute = Left(sSpentTime, Len(sSpentTime) - 1)
                            End If
                            nSpentMinute = nSpentMinute + sSpentMinute
                        End If
                        sSpentTime = (nSpentMinute \ 60) & ":" & (nSpentMinute Mod 60)
                        attributes.Add "spentTime", sSpentTime
                    End If
                    '���t�ƒS���҂����݂����΃��O�ƌ��􂵂ăf�[�^�ێ�
                    If attributes.Exists("date") And attributes.Exists("personId") Then
                        myLogs.Add attributes
                    End If
                End If
            Next
        End Sub
         */
      }
    };
    return viewUtil;
  });

}).call(this);



},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  app.filter('orderObjectBy', function() {
    return function(items, field, reverse) {
      var filtered, results;
      if (field == null) {
        field = '$value';
      }
      if (reverse == null) {
        reverse = true;
      }
      filtered = [];
      angular.forEach(items, function(item, key) {
        return filtered.push({
          key: key,
          item: item
        });
      });
      filtered.sort(function(a, b) {
        if (field === '$key') {
          if (a.key > b.key) {
            return -1;
          } else {
            return 1;
          }
        }
        if (field === '$value') {
          if (a.item > b.item) {
            return -1;
          } else {
            return 1;
          }
        }
        if (typeof field === 'string') {
          if (a[field] > b[field]) {
            return -1;
          } else {
            return 1;
          }
        }
        if (typeof field === 'function') {
          if (field(a.item, a.key) > field(b.item, b.key)) {
            return -1;
          } else {
            return 1;
          }
        }
      });
      if (reverse) {
        filtered.reverse();
      }
      results = [];
      angular.forEach(filtered, function(item) {
        var result;
        result = item.item;
        result['$key'] = item.key;
        return results.push(result);
      });
      return results;
    };
  });

}).call(this);



},{}],5:[function(require,module,exports){
window.app = angular.module('App', ['ui.bootstrap']);

require('./filters/order-object-by');

require('./factories/view-util');

require('./controllers/controller');

require('./controllers/timeline-controller');


},{"./controllers/controller":1,"./controllers/timeline-controller":2,"./factories/view-util":3,"./filters/order-object-by":4}]},{},[5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY29udHJvbGxlcnMvY29udHJvbGxlci5qcyIsInNyYy9jb250cm9sbGVycy90aW1lbGluZS1jb250cm9sbGVyLmpzIiwic3JjL2ZhY3Rvcmllcy92aWV3LXV0aWwuanMiLCJzcmMvZmlsdGVycy9vcmRlci1vYmplY3QtYnkuanMiLCJDOlxcVXNlcnNcXGhpZ2FzaGluYWthdHN1XFxEb2N1bWVudHNcXHdvcmtzcGFjZVxcZXZlcm5vdGUtdGFza2xvZ1xccHVibGljXFxqYXZhc2NyaXB0c1xcc3JjXFxpbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEVBLE1BQU0sQ0FBQyxHQUFQLEdBQWEsT0FBTyxDQUFDLE1BQVIsQ0FBZSxLQUFmLEVBQXNCLENBQUMsY0FBRCxDQUF0Qjs7QUFHYixPQUFBLENBQVEsMkJBQVI7O0FBR0EsT0FBQSxDQUFRLHVCQUFSOztBQUdBLE9BQUEsQ0FBUSwwQkFBUjs7QUFDQSxPQUFBLENBQVEsbUNBQVIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjkuM1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgQ29udHJvbGxlcjtcblxuICBDb250cm9sbGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIENvbnRyb2xsZXIoJHNjb3BlLCB2aWV3VXRpbCkge1xuICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XG4gICAgICB0aGlzLnZpZXdVdGlsID0gdmlld1V0aWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIENvbnRyb2xsZXI7XG5cbiAgfSkoKTtcblxuICBhcHAuY29udHJvbGxlcignQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJ3ZpZXdVdGlsJywgQ29udHJvbGxlcl0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gQ29udHJvbGxlcjtcblxufSkuY2FsbCh0aGlzKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJvbGxlci5qcy5tYXBcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS45LjNcbihmdW5jdGlvbigpIHtcbiAgdmFyIFRpbWVsaW5lQ29udHJvbGxlcjtcblxuICBUaW1lbGluZUNvbnRyb2xsZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gVGltZWxpbmVDb250cm9sbGVyKCRzY29wZSkge1xuICAgICAgdmFyIGNvbnRhaW5lciwgZGF0YSwgb3B0aW9ucywgdGltZWxpbmU7XG4gICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcbiAgICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lbGluZScpO1xuICAgICAgZGF0YSA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAxLFxuICAgICAgICAgIGNvbnRlbnQ6ICdpdGVtIDEnLFxuICAgICAgICAgIHN0YXJ0OiAnMjAxMy0wNC0yMCdcbiAgICAgICAgfSwge1xuICAgICAgICAgIGlkOiAyLFxuICAgICAgICAgIGNvbnRlbnQ6ICdpdGVtIDInLFxuICAgICAgICAgIHN0YXJ0OiAnMjAxMy0wNC0xNCdcbiAgICAgICAgfSwge1xuICAgICAgICAgIGlkOiAzLFxuICAgICAgICAgIGNvbnRlbnQ6ICdpdGVtIDMnLFxuICAgICAgICAgIHN0YXJ0OiAnMjAxMy0wNC0xOCdcbiAgICAgICAgfSwge1xuICAgICAgICAgIGlkOiA0LFxuICAgICAgICAgIGNvbnRlbnQ6ICdpdGVtIDQnLFxuICAgICAgICAgIHN0YXJ0OiAnMjAxMy0wNC0xNicsXG4gICAgICAgICAgZW5kOiAnMjAxMy0wNC0xOSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIGlkOiA1LFxuICAgICAgICAgIGNvbnRlbnQ6ICdpdGVtIDUnLFxuICAgICAgICAgIHN0YXJ0OiAnMjAxMy0wNC0yNSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIGlkOiA2LFxuICAgICAgICAgIGNvbnRlbnQ6ICdpdGVtIDYnLFxuICAgICAgICAgIHN0YXJ0OiAnMjAxMy0wNC0yNydcbiAgICAgICAgfVxuICAgICAgXTtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIHRpbWVsaW5lID0gbmV3IHZpcy5UaW1lbGluZShjb250YWluZXIsIGRhdGEsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBUaW1lbGluZUNvbnRyb2xsZXI7XG5cbiAgfSkoKTtcblxuICBhcHAuY29udHJvbGxlcignVGltZWxpbmVDb250cm9sbGVyJywgWyckc2NvcGUnLCBUaW1lbGluZUNvbnRyb2xsZXJdKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFRpbWVsaW5lQ29udHJvbGxlcjtcblxufSkuY2FsbCh0aGlzKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZWxpbmUtY29udHJvbGxlci5qcy5tYXBcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS45LjNcbihmdW5jdGlvbigpIHtcbiAgYXBwLmZhY3RvcnkoJ3ZpZXdVdGlsJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZXdVdGlsO1xuICAgIHZpZXdVdGlsID0ge1xuICAgICAgZ2V0RGF0ZTogZnVuY3Rpb24oZGF0ZXRpbWUpIHtcbiAgICAgICAgdmFyIGRhdGU7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRldGltZSk7XG4gICAgICAgIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgKyAnLycgKyBkYXRlLmdldE1vbnRoKCkgKyAnLycgKyBkYXRlLmdldERhdGUoKTtcbiAgICAgIH0sXG4gICAgICBnZXRUaW1lOiBmdW5jdGlvbihkYXRldGltZSkge1xuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGV0aW1lKTtcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKSArICc6JyArIGRhdGUuZ2V0TWludXRlcygpICsgJzonICsgZGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgICB9LFxuICAgICAgcGFyc2VOb3RlQ29udGVudDogZnVuY3Rpb24oY29udGVudCkge1xuICAgICAgICB2YXIgY2xlYXJMaW5lLCBpLCBsZW4sIGxpbmUsIGxvZ3MsIHByb2ZpdHMsIHJlZiwgcmVzdWx0cztcbiAgICAgICAgcHJvZml0cyA9IFtdO1xuICAgICAgICBsb2dzID0gW107XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1xcclxcbnxcXHJ8XFxufDxiclxcLz58PFxcL2Rpdj58PFxcL3VsPnw8XFwvbGk+L2csICc8PicpO1xuICAgICAgICByZWYgPSBjb250ZW50LnNwbGl0KCc8PicpO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGxpbmUgPSByZWZbaV07XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGNsZWFyTGluZSA9IGxpbmUucmVwbGFjZSgvPFtePl0qPi9nLCAnJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuXG4gICAgICAgIC8qXG4gICAgICAgICAgICByZWdFeHBQcm9maXQuUGF0dGVybiA9IFwiW0Dvv73vv71dKFxcXFx877+977+9KVwiXG4gICAgICAgICAgICByZWdFeHBQcm9maXQuSWdub3JlQ2FzZSA9IFRydWVcbiAgICAgICAgICAgIHJlZ0V4cExvZy5QYXR0ZXJuID0gXCJbQO+/ve+/vV0oXFxkezIsNH0vXFxkezEsMn0vXFxkezEsMn0pXCJcbiAgICAgICAgICAgIHJlZ0V4cERhdGUuUGF0dGVybiA9IFwiXFxkezIsNH0vXFxkezEsMn0vXFxkezEsMn1cIlxuICAgICAgICAgICAgcmVnRXhwVGltZS5QYXR0ZXJuID0gXCJcXGR7MSwyfTpcXGR7MSwyfTpcXGR7MSwyfXxcXGR7MSwyfTpcXGR7MSwyfVwiXG4gICAgICAgICAgICByZWdFeHBTcGVudFRpbWUuUGF0dGVybiA9IFwiXFxkK2hcXGQrbXxcXGQrbXxcXGQraHxcXGQrXFwuXFxkK2hcIlxuICAgICAgICAgICAgcmVnRXhwU3BlbnRUaW1lLklnbm9yZUNhc2UgPSBUcnVlXG4gICAgICAgIFxuICAgICAgICAgICAgRm9yIEVhY2ggbGluZSBJbiBTcGxpdChjb250ZW50LCBcIjw+XCIpXG4gICAgICAgIFxuICAgICAgICAgICAgICAgICfvv73vv73vv71277+977+977+977+977+977+977+9zInvv73vv73vv71cbiAgICAgICAgICAgICAgICBTZXQgbGluZU1hdGNocyA9IHJlZ0V4cFByb2ZpdC5FeGVjdXRlKGNsZWFyTGluZSlcbiAgICAgICAgICAgICAgICBJZiBsaW5lTWF0Y2hzLmNvdW50ID4gMCBUaGVuXG4gICAgICAgICAgICAgICAgICAgIFNldCBhdHRyaWJ1dGVzID0gTmV3IERpY3Rpb25hcnlcbiAgICAgICAgICAgICAgICAgICAgU2V0IGxpbmVNYXRjaCA9IGxpbmVNYXRjaHMuSXRlbSgwKVxuICAgICAgICAgICAgICAgICAgICAn77+9Uu+/ve+/ve+/ve+/ve+/vWfvv73MjuaTvlxuICAgICAgICAgICAgICAgICAgICBJZiBsaW5lTWF0Y2guRmlyc3RJbmRleCA+IDAgVGhlblxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5BZGQgXCJjb21tZW50XCIsIFRyaW0oTGVmdChjbGVhckxpbmUsIGxpbmVNYXRjaC5GaXJzdEluZGV4IC0gMSkpXG4gICAgICAgICAgICAgICAgICAgIEVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuQWRkIFwiY29tbWVudFwiLCBcIlwiXG4gICAgICAgICAgICAgICAgICAgIEVuZCBJZlxuICAgICAgICAgICAgICAgICAgICAn77+977+977+9du+/vXrvv73MjuaTvlxuICAgICAgICAgICAgICAgICAgICBwcm9maXRUZXh0ID0gVHJpbShNaWQoY2xlYXJMaW5lLCBsaW5lTWF0Y2guRmlyc3RJbmRleCArIGxpbmVNYXRjaC5MZW5ndGggKyAxKSlcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5BZGQgXCJwcm9maXRcIiwgVmFsKHByb2ZpdFRleHQpXG4gICAgICAgICAgICAgICAgICAgIG15UHJvZml0cy5BZGQgYXR0cmlidXRlc1xuICAgICAgICAgICAgICAgIEVuZCBJZlxuICAgICAgICBcbiAgICAgICAgICAgICAgICAn77+977+977+9T++/ve+/ve+/ve+/ve+/ve+/ve+/vcyJ77+977+977+9XG4gICAgICAgICAgICAgICAgU2V0IGxpbmVNYXRjaHMgPSByZWdFeHBMb2cuRXhlY3V0ZShjbGVhckxpbmUpXG4gICAgICAgICAgICAgICAgSWYgbGluZU1hdGNocy5jb3VudCA+IDAgVGhlblxuICAgICAgICAgICAgICAgICAgICBTZXQgYXR0cmlidXRlcyA9IE5ldyBEaWN0aW9uYXJ5XG4gICAgICAgICAgICAgICAgICAgIFNldCBsaW5lTWF0Y2ggPSBsaW5lTWF0Y2hzLkl0ZW0oMClcbiAgICAgICAgICAgICAgICAgICAgJ++/vVLvv73vv73vv73vv73vv71n77+9zI7mk75cbiAgICAgICAgICAgICAgICAgICAgSWYgbGluZU1hdGNoLkZpcnN0SW5kZXggPiAwIFRoZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuQWRkIFwiY29tbWVudFwiLCBUcmltKExlZnQoY2xlYXJMaW5lLCBsaW5lTWF0Y2guRmlyc3RJbmRleCAtIDEpKVxuICAgICAgICAgICAgICAgICAgICBFbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLkFkZCBcImNvbW1lbnRcIiwgXCJcIlxuICAgICAgICAgICAgICAgICAgICBFbmQgSWZcbiAgICAgICAgICAgICAgICAgICAgJ++/vVLvv73vv73vv73vv73vv71n77+9yIpP77+9zINl77+9TO+/vVjvv71n77+95pO+XG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNUZXh0ID0gVHJpbShNaWQoY2xlYXJMaW5lLCBsaW5lTWF0Y2guRmlyc3RJbmRleCArIDEpKVxuICAgICAgICAgICAgICAgICAgICAn77+977+977+9dO+/vcyO5pO+XG4gICAgICAgICAgICAgICAgICAgIFNldCBsb2dNYXRjaHMgPSByZWdFeHBEYXRlLkV4ZWN1dGUoYXR0cmlidXRlc1RleHQpXG4gICAgICAgICAgICAgICAgICAgIElmIGxvZ01hdGNocy5jb3VudCA+IDAgVGhlblxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5BZGQgXCJkYXRlXCIsIGxvZ01hdGNocy5JdGVtKDApXG4gICAgICAgICAgICAgICAgICAgIEVuZCBJZlxuICAgICAgICAgICAgICAgICAgICAn77+977+977+977+977+9zI7mk75cbiAgICAgICAgICAgICAgICAgICAgU2V0IGxvZ01hdGNocyA9IHJlZ0V4cFRpbWUuRXhlY3V0ZShhdHRyaWJ1dGVzVGV4dClcbiAgICAgICAgICAgICAgICAgICAgSWYgbG9nTWF0Y2hzLmNvdW50ID4gMCBUaGVuXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLkFkZCBcInRpbWVcIiwgbG9nTWF0Y2hzLkl0ZW0oMClcbiAgICAgICAgICAgICAgICAgICAgRW5kIElmXG4gICAgICAgICAgICAgICAgICAgICfvv71T77+977+977+90oLMjuaTvlxuICAgICAgICAgICAgICAgICAgICBEaW0gYWxpYXMgQXMgRGljdGlvbmFyeVxuICAgICAgICAgICAgICAgICAgICBEaW0gcCBBcyBWYXJpYW50XG4gICAgICAgICAgICAgICAgICAgIEZvciBFYWNoIHAgSW4gbXlQZXJzb25BbGlhc2VzXG4gICAgICAgICAgICAgICAgICAgICAgICBTZXQgYWxpYXMgPSBwXG4gICAgICAgICAgICAgICAgICAgICAgICBJZiBJblN0cihhdHRyaWJ1dGVzVGV4dCwgYWxpYXMuSXRlbShcImFsaWFzTmFtZVwiKSkgVGhlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuQWRkIFwicGVyc29uSWRcIiwgYWxpYXMuSXRlbShcInBlcnNvbklkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5BZGQgXCJwZXJzb25BYmJyTmFtZVwiLCBhbGlhcy5JdGVtKFwiYWJick5hbWVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGl0IEZvclxuICAgICAgICAgICAgICAgICAgICAgICAgRW5kIElmXG4gICAgICAgICAgICAgICAgICAgIE5leHRcbiAgICAgICAgICAgICAgICAgICAgJ++/ve+/ve+/vcaO77+977+91ILMjuaTvlxuICAgICAgICAgICAgICAgICAgICBTZXQgbG9nTWF0Y2hzID0gcmVnRXhwU3BlbnRUaW1lLkV4ZWN1dGUoYXR0cmlidXRlc1RleHQpXG4gICAgICAgICAgICAgICAgICAgIElmIGxvZ01hdGNocy5jb3VudCA+IDAgVGhlblxuICAgICAgICAgICAgICAgICAgICAgICAgRGltIHNTcGVudFRpbWUgQXMgU3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBEaW0gc1NwZW50SG91ciBBcyBTdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIERpbSBzU3BlbnRNaW51dGUgQXMgU3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBEaW0gblNwZW50TWludXRlIEFzIEludGVnZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNTcGVudFRpbWUgPSBMQ2FzZShsb2dNYXRjaHMuSXRlbSgwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG5TcGVudE1pbnV0ZSA9IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIElmIEluU3RyKHNTcGVudFRpbWUsIFwiaFwiKSA+IDAgVGhlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNTcGVudEhvdXIgPSBMZWZ0KHNTcGVudFRpbWUsIEluU3RyKHNTcGVudFRpbWUsIFwiaFwiKSAtIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgblNwZW50TWludXRlID0gblNwZW50TWludXRlICsgUm91bmQoc1NwZW50SG91ciAqIDYwKVxuICAgICAgICAgICAgICAgICAgICAgICAgRW5kIElmXG4gICAgICAgICAgICAgICAgICAgICAgICBJZiBJblN0cihzU3BlbnRUaW1lLCBcIm1cIikgPiAwIFRoZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBJblN0cihzU3BlbnRUaW1lLCBcImhcIikgPiAwIFRoZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc1NwZW50TWludXRlID0gTWlkKHNTcGVudFRpbWUsIEluU3RyKHNTcGVudFRpbWUsIFwiaFwiKSArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNTcGVudE1pbnV0ZSA9IExlZnQoc1NwZW50TWludXRlLCBMZW4oc1NwZW50TWludXRlKSAtIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzU3BlbnRNaW51dGUgPSBMZWZ0KHNTcGVudFRpbWUsIExlbihzU3BlbnRUaW1lKSAtIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRW5kIElmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgblNwZW50TWludXRlID0gblNwZW50TWludXRlICsgc1NwZW50TWludXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBFbmQgSWZcbiAgICAgICAgICAgICAgICAgICAgICAgIHNTcGVudFRpbWUgPSAoblNwZW50TWludXRlIFxcIDYwKSAmIFwiOlwiICYgKG5TcGVudE1pbnV0ZSBNb2QgNjApXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLkFkZCBcInNwZW50VGltZVwiLCBzU3BlbnRUaW1lXG4gICAgICAgICAgICAgICAgICAgIEVuZCBJZlxuICAgICAgICAgICAgICAgICAgICAn77+977+977+9dO+/vcaSU++/ve+/ve+/vdKC77+977+977+977+93YLvv73vv73vv73vv73Og++/ve+/vU/vv73GjO+/ve+/vfSCtYLEg2bvv71b77+9Xu+/vduO77+9XG4gICAgICAgICAgICAgICAgICAgIElmIGF0dHJpYnV0ZXMuRXhpc3RzKFwiZGF0ZVwiKSBBbmQgYXR0cmlidXRlcy5FeGlzdHMoXCJwZXJzb25JZFwiKSBUaGVuXG4gICAgICAgICAgICAgICAgICAgICAgICBteUxvZ3MuQWRkIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgRW5kIElmXG4gICAgICAgICAgICAgICAgRW5kIElmXG4gICAgICAgICAgICBOZXh0XG4gICAgICAgIEVuZCBTdWJcbiAgICAgICAgICovXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gdmlld1V0aWw7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWV3LXV0aWwuanMubWFwXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4zXG4oZnVuY3Rpb24oKSB7XG4gIGFwcC5maWx0ZXIoJ29yZGVyT2JqZWN0QnknLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oaXRlbXMsIGZpZWxkLCByZXZlcnNlKSB7XG4gICAgICB2YXIgZmlsdGVyZWQsIHJlc3VsdHM7XG4gICAgICBpZiAoZmllbGQgPT0gbnVsbCkge1xuICAgICAgICBmaWVsZCA9ICckdmFsdWUnO1xuICAgICAgfVxuICAgICAgaWYgKHJldmVyc2UgPT0gbnVsbCkge1xuICAgICAgICByZXZlcnNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZpbHRlcmVkID0gW107XG4gICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGtleSkge1xuICAgICAgICByZXR1cm4gZmlsdGVyZWQucHVzaCh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgaXRlbTogaXRlbVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZmlsdGVyZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIGlmIChmaWVsZCA9PT0gJyRrZXknKSB7XG4gICAgICAgICAgaWYgKGEua2V5ID4gYi5rZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaWVsZCA9PT0gJyR2YWx1ZScpIHtcbiAgICAgICAgICBpZiAoYS5pdGVtID4gYi5pdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZpZWxkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChhW2ZpZWxkXSA+IGJbZmllbGRdKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZpZWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGZpZWxkKGEuaXRlbSwgYS5rZXkpID4gZmllbGQoYi5pdGVtLCBiLmtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIGZpbHRlcmVkLnJldmVyc2UoKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChmaWx0ZXJlZCwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICByZXN1bHQgPSBpdGVtLml0ZW07XG4gICAgICAgIHJlc3VsdFsnJGtleSddID0gaXRlbS5rZXk7XG4gICAgICAgIHJldHVybiByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9yZGVyLW9iamVjdC1ieS5qcy5tYXBcbiIsIiMgYW5ndWxhci5qcyBzZXR0aW5nXHJcbndpbmRvdy5hcHAgPSBhbmd1bGFyLm1vZHVsZSgnQXBwJywgWyd1aS5ib290c3RyYXAnXSlcclxuXHJcbiMgYW5ndWxhci5qcyBmaWx0ZXJzXHJcbnJlcXVpcmUgJy4vZmlsdGVycy9vcmRlci1vYmplY3QtYnknXHJcblxyXG4jIGFuZ3VsYXIuanMgZmFjdG9yaWVzXHJcbnJlcXVpcmUgJy4vZmFjdG9yaWVzL3ZpZXctdXRpbCdcclxuXHJcbiMgYW5ndWxhci5qcyBjb250cm9sbGVyc1xyXG5yZXF1aXJlICcuL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXInXHJcbnJlcXVpcmUgJy4vY29udHJvbGxlcnMvdGltZWxpbmUtY29udHJvbGxlcidcclxuIl19
