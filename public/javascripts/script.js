(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var Controller;

  Controller = (function() {
    function Controller($scope) {
      this.$scope = $scope;
    }

    return Controller;

  })();

  app.controller('Controller', ['$scope', Controller]);

  module.exports = Controller;

}).call(this);



},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var TimelineController;

  TimelineController = (function() {
    function TimelineController($scope) {
      var container, data, options, timeline;
      this.$scope = $scope;
      container = document.getElementById('timeline');
      data = [
        {
          id: 1,
          content: 'item 1',
          start: '2013-04-20'
        }, {
          id: 2,
          content: 'item 2',
          start: '2013-04-14'
        }, {
          id: 3,
          content: 'item 3',
          start: '2013-04-18'
        }, {
          id: 4,
          content: 'item 4',
          start: '2013-04-16',
          end: '2013-04-19'
        }, {
          id: 5,
          content: 'item 5',
          start: '2013-04-25'
        }, {
          id: 6,
          content: 'item 6',
          start: '2013-04-27'
        }
      ];
      options = {};
      timeline = new vis.Timeline(container, data, options);
    }

    return TimelineController;

  })();

  app.controller('TimelineController', ['$scope', TimelineController]);

  module.exports = TimelineController;

}).call(this);



},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  app.filter('orderObjectBy', function() {
    return function(items, field, reverse) {
      var filtered, results;
      if (field == null) {
        field = '$value';
      }
      if (reverse == null) {
        reverse = true;
      }
      filtered = [];
      angular.forEach(items, function(item, key) {
        return filtered.push({
          key: key,
          item: item
        });
      });
      filtered.sort(function(a, b) {
        if (field === '$key') {
          if (a.key > b.key) {
            return -1;
          } else {
            return 1;
          }
        }
        if (field === '$value') {
          if (a.item > b.item) {
            return -1;
          } else {
            return 1;
          }
        }
        if (typeof field === 'string') {
          if (a[field] > b[field]) {
            return -1;
          } else {
            return 1;
          }
        }
        if (typeof field === 'function') {
          if (field(a.item, a.key) > field(b.item, b.key)) {
            return -1;
          } else {
            return 1;
          }
        }
      });
      if (reverse) {
        filtered.reverse();
      }
      results = [];
      angular.forEach(filtered, function(item) {
        var result;
        result = item.item;
        result['$key'] = item.key;
        return results.push(result);
      });
      return results;
    };
  });

}).call(this);



},{}],4:[function(require,module,exports){
window.app = angular.module('App', ['ui.bootstrap']);

require('./filters/order-object-by');

require('./controllers/controller');

require('./controllers/timeline-controller');


},{"./controllers/controller":1,"./controllers/timeline-controller":2,"./filters/order-object-by":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY29udHJvbGxlcnMvY29udHJvbGxlci5qcyIsInNyYy9jb250cm9sbGVycy90aW1lbGluZS1jb250cm9sbGVyLmpzIiwic3JjL2ZpbHRlcnMvb3JkZXItb2JqZWN0LWJ5LmpzIiwiQzpcXFVzZXJzXFxoaWdhc2hpbmFrYXRzdVxcRG9jdW1lbnRzXFx3b3Jrc3BhY2VcXGV2ZXJub3RlLXRhc2tsb2dcXHB1YmxpY1xcamF2YXNjcmlwdHNcXHNyY1xcaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEVBLE1BQU0sQ0FBQyxHQUFQLEdBQWEsT0FBTyxDQUFDLE1BQVIsQ0FBZSxLQUFmLEVBQXNCLENBQUMsY0FBRCxDQUF0Qjs7QUFHYixPQUFBLENBQVEsMkJBQVI7O0FBR0EsT0FBQSxDQUFRLDBCQUFSOztBQUNBLE9BQUEsQ0FBUSxtQ0FBUiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4zXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBDb250cm9sbGVyO1xuXG4gIENvbnRyb2xsZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gQ29udHJvbGxlcigkc2NvcGUpIHtcbiAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgIH1cblxuICAgIHJldHVybiBDb250cm9sbGVyO1xuXG4gIH0pKCk7XG5cbiAgYXBwLmNvbnRyb2xsZXIoJ0NvbnRyb2xsZXInLCBbJyRzY29wZScsIENvbnRyb2xsZXJdKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IENvbnRyb2xsZXI7XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRyb2xsZXIuanMubWFwXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4zXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBUaW1lbGluZUNvbnRyb2xsZXI7XG5cbiAgVGltZWxpbmVDb250cm9sbGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lQ29udHJvbGxlcigkc2NvcGUpIHtcbiAgICAgIHZhciBjb250YWluZXIsIGRhdGEsIG9wdGlvbnMsIHRpbWVsaW5lO1xuICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XG4gICAgICBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZWxpbmUnKTtcbiAgICAgIGRhdGEgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogMSxcbiAgICAgICAgICBjb250ZW50OiAnaXRlbSAxJyxcbiAgICAgICAgICBzdGFydDogJzIwMTMtMDQtMjAnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBpZDogMixcbiAgICAgICAgICBjb250ZW50OiAnaXRlbSAyJyxcbiAgICAgICAgICBzdGFydDogJzIwMTMtMDQtMTQnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBpZDogMyxcbiAgICAgICAgICBjb250ZW50OiAnaXRlbSAzJyxcbiAgICAgICAgICBzdGFydDogJzIwMTMtMDQtMTgnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBpZDogNCxcbiAgICAgICAgICBjb250ZW50OiAnaXRlbSA0JyxcbiAgICAgICAgICBzdGFydDogJzIwMTMtMDQtMTYnLFxuICAgICAgICAgIGVuZDogJzIwMTMtMDQtMTknXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBpZDogNSxcbiAgICAgICAgICBjb250ZW50OiAnaXRlbSA1JyxcbiAgICAgICAgICBzdGFydDogJzIwMTMtMDQtMjUnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBpZDogNixcbiAgICAgICAgICBjb250ZW50OiAnaXRlbSA2JyxcbiAgICAgICAgICBzdGFydDogJzIwMTMtMDQtMjcnXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgICBvcHRpb25zID0ge307XG4gICAgICB0aW1lbGluZSA9IG5ldyB2aXMuVGltZWxpbmUoY29udGFpbmVyLCBkYXRhLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gVGltZWxpbmVDb250cm9sbGVyO1xuXG4gIH0pKCk7XG5cbiAgYXBwLmNvbnRyb2xsZXIoJ1RpbWVsaW5lQ29udHJvbGxlcicsIFsnJHNjb3BlJywgVGltZWxpbmVDb250cm9sbGVyXSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBUaW1lbGluZUNvbnRyb2xsZXI7XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVsaW5lLWNvbnRyb2xsZXIuanMubWFwXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4zXG4oZnVuY3Rpb24oKSB7XG4gIGFwcC5maWx0ZXIoJ29yZGVyT2JqZWN0QnknLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oaXRlbXMsIGZpZWxkLCByZXZlcnNlKSB7XG4gICAgICB2YXIgZmlsdGVyZWQsIHJlc3VsdHM7XG4gICAgICBpZiAoZmllbGQgPT0gbnVsbCkge1xuICAgICAgICBmaWVsZCA9ICckdmFsdWUnO1xuICAgICAgfVxuICAgICAgaWYgKHJldmVyc2UgPT0gbnVsbCkge1xuICAgICAgICByZXZlcnNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZpbHRlcmVkID0gW107XG4gICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGtleSkge1xuICAgICAgICByZXR1cm4gZmlsdGVyZWQucHVzaCh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgaXRlbTogaXRlbVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZmlsdGVyZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIGlmIChmaWVsZCA9PT0gJyRrZXknKSB7XG4gICAgICAgICAgaWYgKGEua2V5ID4gYi5rZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaWVsZCA9PT0gJyR2YWx1ZScpIHtcbiAgICAgICAgICBpZiAoYS5pdGVtID4gYi5pdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZpZWxkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChhW2ZpZWxkXSA+IGJbZmllbGRdKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZpZWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGZpZWxkKGEuaXRlbSwgYS5rZXkpID4gZmllbGQoYi5pdGVtLCBiLmtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIGZpbHRlcmVkLnJldmVyc2UoKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChmaWx0ZXJlZCwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICByZXN1bHQgPSBpdGVtLml0ZW07XG4gICAgICAgIHJlc3VsdFsnJGtleSddID0gaXRlbS5rZXk7XG4gICAgICAgIHJldHVybiByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9yZGVyLW9iamVjdC1ieS5qcy5tYXBcbiIsIiMgYW5ndWxhci5qcyBzZXR0aW5nXHJcbndpbmRvdy5hcHAgPSBhbmd1bGFyLm1vZHVsZSgnQXBwJywgWyd1aS5ib290c3RyYXAnXSlcclxuXHJcbiMgYW5ndWxhci5qcyBmaWx0ZXJzXHJcbnJlcXVpcmUgJy4vZmlsdGVycy9vcmRlci1vYmplY3QtYnknXHJcblxyXG4jIGFuZ3VsYXIuanMgY29udHJvbGxlcnNcclxucmVxdWlyZSAnLi9jb250cm9sbGVycy9jb250cm9sbGVyJ1xyXG5yZXF1aXJlICcuL2NvbnRyb2xsZXJzL3RpbWVsaW5lLWNvbnRyb2xsZXInXHJcbiJdfQ==
