(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var Controller,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Controller = (function() {
    function Controller($scope, $rootScope, $http, progress, noteFilter) {
      this.$scope = $scope;
      this.$rootScope = $rootScope;
      this.$http = $http;
      this.progress = progress;
      this.noteFilter = noteFilter;
      this.reload = bind(this.reload, this);
      this.$rootScope.user = null;
      this.$rootScope.persons = {};
      this.$rootScope.notebooks = {};
      this.$rootScope.stacks = [];
      this.$rootScope.notes = {};
      this.$rootScope.timeLogs = {};
      this.$scope.reload = this.reload;
      this.reload((function(_this) {
        return function() {};
      })(this));
    }

    Controller.prototype.reload = function(callback) {
      var noteCount, query;
      if (!callback) {
        callback = (function(_this) {
          return function() {};
        })(this);
      }
      query = this.noteFilter.query();
      noteCount = 0;
      this.progress.open();
      return async.series([
        (function(_this) {
          return function(callback) {
            if (_this.$rootScope.user) {
              return callback();
            }
            _this.progress.set('Getting user data.', 0);
            return _this.$http.get('/user').success(function(data) {
              _this.$rootScope.user = data;
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            _this.progress.set('Syncing remote server.', 0);
            return _this.$http.get('/sync').success(function() {
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            _this.progress.set('Getting persons data.', 10);
            return _this.$http.get('/persons').success(function(data) {
              var i, len, person;
              _this.$rootScope.persons = {};
              for (i = 0, len = data.length; i < len; i++) {
                person = data[i];
                _this.$rootScope.persons[person] = person;
              }
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            _this.progress.set('Getting notebooks data.', 20);
            return _this.$http.get('/notebooks').success(function(data) {
              var i, len, notebook, stackHash;
              _this.$rootScope.notebooks = {};
              stackHash = {};
              for (i = 0, len = data.length; i < len; i++) {
                notebook = data[i];
                _this.$rootScope.notebooks[notebook.guid] = notebook;
                if (notebook.stack) {
                  stackHash[notebook.stack] = true;
                }
              }
              _this.$rootScope.stacks = Object.keys(stackHash);
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            _this.progress.set('Getting notes count.', 30);
            return _this.$http.get('/notes/count', {
              params: {
                query: query
              }
            }).success(function(data) {
              noteCount = data;
              if (noteCount > 100) {
                if (window.confirm("Current query find " + noteCount + " notes. It is too many. Continue anyway?")) {
                  return callback();
                } else {
                  return callback('User Canceled');
                }
              } else {
                return callback();
              }
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            _this.progress.set('Request remote contents.', 40);
            return _this.$http.get('/notes/get-content', {
              params: {
                query: query
              }
            }).success(function(data) {
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            _this.progress.set('Getting notes.', 60);
            return _this.$http.get('/notes', {
              params: {
                query: query,
                content: false
              }
            }).success(function(data) {
              var i, len, note;
              _this.$rootScope.notes = {};
              for (i = 0, len = data.length; i < len; i++) {
                note = data[i];
                _this.$rootScope.notes[note.guid] = note;
              }
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            var guids, note, noteGuid;
            _this.progress.set('Getting time logs.', 80);
            guids = (function() {
              var ref, results;
              ref = this.$rootScope.notes;
              results = [];
              for (noteGuid in ref) {
                note = ref[noteGuid];
                results.push(note.guid);
              }
              return results;
            }).call(_this);
            return _this.$http.post('/time-logs', {
              query: {
                noteGuid: {
                  $in: guids
                }
              },
              limit: 300
            }).success(function(data) {
              var base, i, len, name, timeLog;
              _this.$rootScope.timeLogs = {};
              for (i = 0, len = data.length; i < len; i++) {
                timeLog = data[i];
                if ((base = _this.$rootScope.timeLogs)[name = timeLog.noteGuid] == null) {
                  base[name] = {};
                }
                _this.$rootScope.timeLogs[timeLog.noteGuid][timeLog._id] = timeLog;
              }
              return callback();
            }).error(function(data) {
              return callback(data);
            });
          };
        })(this)
      ], (function(_this) {
        return function(err) {
          _this.progress.set('Done.', 100);
          _this.progress.close();
          if (err) {
            throw new Error(err);
          }
          return callback(err);
        };
      })(this));
    };

    return Controller;

  })();

  app.controller('Controller', ['$scope', '$rootScope', '$http', 'progress', 'noteFilter', Controller]);

  module.exports = Controller;

}).call(this);



},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var ModalController;

  ModalController = (function() {
    function ModalController($scope) {
      this.$scope = $scope;
    }

    return ModalController;

  })();

  app.controller('ModalController', ['$scope', ModalController]);

  module.exports = ModalController;

}).call(this);



},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var NavigationController;

  NavigationController = (function() {
    function NavigationController($scope, $route) {
      this.$scope = $scope;
      this.$route = $route;
      this.$scope.navCollapse = true;
      this.$scope.$route = this.$route;
    }

    return NavigationController;

  })();

  app.controller('NavigationController', ['$scope', '$route', NavigationController]);

  module.exports = NavigationController;

}).call(this);



},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var NotesController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  NotesController = (function() {
    function NotesController($scope) {
      this.$scope = $scope;
      this._onWatchTimeLogs = bind(this._onWatchTimeLogs, this);
      this._getSpentTime = bind(this._getSpentTime, this);
      this.$scope.noteSpentTimes = {};
      this.$scope.getSpentTime = this._getSpentTime;
      this.$scope.$watchCollection('timeLogs', this._onWatchTimeLogs);
    }

    NotesController.prototype._getSpentTime = function(noteGuid) {
      var hour, minute;
      if (!this.$scope.noteSpentTimes[noteGuid]) {
        return '0m';
      }
      hour = Math.floor(this.$scope.noteSpentTimes[noteGuid] / 60);
      minute = this.$scope.noteSpentTimes[noteGuid] % 60;
      if (hour) {
        return hour + 'h' + minute + 'm';
      }
      return minute + 'm';
    };

    NotesController.prototype._onWatchTimeLogs = function(timeLogs) {
      var name, noteGuid, noteSpentTimes, noteTimeLog, timeLog, timeLog_id;
      noteSpentTimes = {};
      for (noteGuid in timeLogs) {
        noteTimeLog = timeLogs[noteGuid];
        for (timeLog_id in noteTimeLog) {
          timeLog = noteTimeLog[timeLog_id];
          if (noteSpentTimes[name = timeLog.noteGuid] == null) {
            noteSpentTimes[name] = 0;
          }
          noteSpentTimes[timeLog.noteGuid] += timeLog.spentTime;
        }
      }
      return this.$scope.noteSpentTimes = noteSpentTimes;
    };

    return NotesController;

  })();

  app.controller('NotesController', ['$scope', NotesController]);

  module.exports = NotesController;

}).call(this);



},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var ModalController, ProgressModalController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ModalController = require('./modal-controller');

  ProgressModalController = (function(superClass) {
    extend(ProgressModalController, superClass);

    function ProgressModalController($scope, progress) {
      this.$scope = $scope;
      this.progress = progress;
      this.$scope.progress = this.progress;
    }

    return ProgressModalController;

  })(ModalController);

  app.controller('ProgressModalController', ['$scope', 'progress', ProgressModalController]);

  module.exports = ProgressModalController;

}).call(this);



},{"./modal-controller":2}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var SettingsController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SettingsController = (function() {
    SettingsController.prototype.lastQueryStr = null;

    function SettingsController($scope, $http, noteFilter) {
      this.$scope = $scope;
      this.$http = $http;
      this.noteFilter = noteFilter;
      this._onWatchNoteFilter = bind(this._onWatchNoteFilter, this);
      this.$scope.noteFilter = this.noteFilter;
      this.$scope.$watchGroup(['noteFilter.updated', 'noteFilter.notebooks', 'noteFilter.stacks'], this._onWatchNoteFilter);
    }

    SettingsController.prototype._onWatchNoteFilter = function() {
      var query, queryStr;
      query = this.noteFilter.query();
      queryStr = JSON.stringify(query);
      if (this.lastQueryStr === queryStr) {
        return;
      }
      this.lastQueryStr = queryStr;
      return this.$http.get('/notes/count', {
        params: {
          query: query
        }
      }).success((function(_this) {
        return function(data) {
          return _this.noteFilter.count = data;
        };
      })(this)).error((function(_this) {
        return function(data) {
          return _this.noteFilter.count = null;
        };
      })(this));
    };

    return SettingsController;

  })();

  app.controller('SettingsController', ['$scope', '$http', 'noteFilter', SettingsController]);

  module.exports = SettingsController;

}).call(this);



},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var TimelineController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TimelineController = (function() {
    function TimelineController($scope) {
      var container, options;
      this.$scope = $scope;
      this._onResize = bind(this._onResize, this);
      this._onWatchProfitLogs = bind(this._onWatchProfitLogs, this);
      this._onWatchNotes = bind(this._onWatchNotes, this);
      this._onWatchPersons = bind(this._onWatchPersons, this);
      this.$scope.timelineItems = new vis.DataSet();
      this.$scope.timelineGroups = new vis.DataSet();
      container = document.getElementById('timeline');
      options = {
        margin: {
          item: 5
        },
        height: window.innerHeight - 80,
        orientation: {
          axis: 'both',
          item: 'top'
        },
        start: moment().startOf('day'),
        end: moment().endOf('day'),
        hiddenDates: [
          {
            start: moment().subtract(1, 'days').startOf('day').hour(20),
            end: moment().startOf('day').hour(8),
            repeat: 'daily'
          }
        ],
        order: function(a, b) {
          return a.start - b.start;
        }
      };
      this.$scope.timeline = new vis.Timeline(container, this.$scope.timelineItems, this.$scope.timelineGroups, options);
      this.$scope.$watchCollection('persons', this._onWatchPersons);
      this.$scope.$watchCollection('notes', this._onWatchNotes);
      this.$scope.$watchCollection('timeLogs', this._onWatchNotes);
      this.$scope.$watchCollection('profitLogs', this._onWatchProfitLogs);
      this.$scope.$on('resize::resize', this._onResize);
    }

    TimelineController.prototype._onWatchPersons = function() {
      var key, person, ref;
      this.$scope.timelineGroups.clear();
      ref = this.$scope.persons;
      for (key in ref) {
        person = ref[key];
        this.$scope.timelineGroups.add({
          id: key,
          content: person
        });
      }
      return this.$scope.timelineGroups.add({
        id: 'updated',
        content: 'Update'
      });
    };

    TimelineController.prototype._onWatchNotes = function() {
      var note, noteGuid, noteTimeLog, ref, ref1, results, timeLog, timeLogs_id;
      this.$scope.timelineItems.clear();
      ref = this.$scope.notes;
      for (noteGuid in ref) {
        note = ref[noteGuid];
        this.$scope.timelineItems.add({
          id: note.guid,
          group: 'updated',
          content: "<a href=\"evernote:///view/" + this.$scope.user.id + "/" + this.$scope.user.shardId + "/" + note.guid + "/" + note.guid + "/\">" + note.title + "</a>",
          start: new Date(note.updated),
          type: 'point'
        });
      }
      ref1 = this.$scope.timeLogs;
      results = [];
      for (noteGuid in ref1) {
        noteTimeLog = ref1[noteGuid];
        results.push((function() {
          var results1;
          results1 = [];
          for (timeLogs_id in noteTimeLog) {
            timeLog = noteTimeLog[timeLogs_id];
            results1.push(this.$scope.timelineItems.add({
              id: timeLog._id,
              group: timeLog.person,
              content: "<a href=\"evernote:///view/" + this.$scope.user.id + "/" + this.$scope.user.shardId + "/" + timeLog.noteGuid + "/" + timeLog.noteGuid + "/\">" + this.$scope.notes[timeLog.noteGuid].title + " " + timeLog.comment + "</a>",
              start: moment(timeLog.date),
              end: timeLog.spentTime ? moment(timeLog.date).add(timeLog.spentTime, 'minutes') : null,
              type: timeLog.spentTime ? 'range' : 'point'
            }));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    TimelineController.prototype._onWatchProfitLogs = function() {};

    TimelineController.prototype._onResize = function(event) {
      return this.$scope.timeline.setOptions({
        height: window.innerHeight - 90
      });
    };

    return TimelineController;

  })();

  app.controller('TimelineController', ['$scope', TimelineController]);

  module.exports = TimelineController;

}).call(this);



},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  app.directive('resize', function($timeout, $rootScope, $window) {
    return {
      link: function() {
        var timer;
        timer = false;
        return angular.element($window).on('load resize', function(event) {
          if (timer) {
            $timeout.cancel(timer);
          }
          return timer = $timeout(function() {
            return $rootScope.$broadcast('resize::resize');
          }, 200);
        });
      }
    };
  });

}).call(this);



},{}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var checkItemMatches, filterByProperty;

  checkItemMatches = (function(_this) {
    return function(item, props) {
      var itemMatches, prop, text;
      itemMatches = false;
      for (prop in props) {
        text = props[prop];
        text = text.toLowerCase();
        if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
          itemMatches = true;
          break;
        }
      }
      return itemMatches;
    };
  })(this);

  filterByProperty = function() {
    return function(items, props) {
      var i, item, itemMatches, key, len, out;
      out = [];
      if (angular.isArray(items)) {
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          itemMatches = checkItemMatches(item, props);
          if (itemMatches) {
            out.push(item);
          }
        }
      } else if (angular.isObject(items)) {
        for (key in items) {
          item = items[key];
          itemMatches = checkItemMatches(item, props);
          if (itemMatches) {
            out.push(item);
          }
        }
      } else {
        out = items;
      }
      return out;
    };
  };

  app.filter('filterByProperty', filterByProperty);

  module.exports = filterByProperty;

}).call(this);



},{}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var orderObjectBy;

  orderObjectBy = function() {
    return function(items, field, reverse) {
      var filtered, results;
      if (field == null) {
        field = '$value';
      }
      if (reverse == null) {
        reverse = true;
      }
      filtered = [];
      angular.forEach(items, function(item, key) {
        return filtered.push({
          key: key,
          item: item
        });
      });
      filtered.sort(function(a, b) {
        if (field === '$key') {
          if (a.key > b.key) {
            return -1;
          } else {
            return 1;
          }
        }
        if (field === '$value') {
          if (a.item > b.item) {
            return -1;
          } else {
            return 1;
          }
        }
        if (typeof field === 'string') {
          if (a[field] > b[field]) {
            return -1;
          } else {
            return 1;
          }
        }
        if (typeof field === 'function') {
          if (field(a.item, a.key) > field(b.item, b.key)) {
            return -1;
          } else {
            return 1;
          }
        }
      });
      if (reverse) {
        filtered.reverse();
      }
      results = [];
      angular.forEach(filtered, function(item) {
        var result;
        result = item.item;
        result['$key'] = item.key;
        return results.push(result);
      });
      return results;
    };
  };

  app.filter('orderObjectBy', orderObjectBy);

  module.exports = orderObjectBy;

}).call(this);



},{}],11:[function(require,module,exports){
window.app = angular.module('App', ['ngRoute', 'ui.bootstrap', 'ngSanitize', 'ui.select']);

app.config([
  '$compileProvider', function($compileProvider) {
    return $compileProvider.aHrefSanitizationWhitelist(/^\s*(http|https|mailto|evernote):/);
  }
]);

require('./route');

require('./filters/filter-by-property');

require('./filters/order-object-by');

require('./services/note-filter');

require('./services/progress');

require('./directives/resize');

require('./controllers/controller');

require('./controllers/navigation-controller');

require('./controllers/timeline-controller');

require('./controllers/notes-controller');

require('./controllers/settings-controller');

require('./controllers/progress-modal-controller');


},{"./controllers/controller":1,"./controllers/navigation-controller":3,"./controllers/notes-controller":4,"./controllers/progress-modal-controller":5,"./controllers/settings-controller":6,"./controllers/timeline-controller":7,"./directives/resize":8,"./filters/filter-by-property":9,"./filters/order-object-by":10,"./route":12,"./services/note-filter":13,"./services/progress":14}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  app.config([
    '$routeProvider', function($routeProvider) {
      return $routeProvider.when('/', {
        redirectTo: '/timeline'
      }).when('/timeline', {
        templateUrl: 'timeline'
      }).when('/notes', {
        templateUrl: 'notes'
      }).when('/settings', {
        templateUrl: 'settings'
      }).otherwise({
        redirectTo: '/'
      });
    }
  ]);

}).call(this);



},{}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var NoteFilterService,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  NoteFilterService = (function() {
    NoteFilterService.prototype.updated = 3;

    NoteFilterService.prototype.notebooks = null;

    NoteFilterService.prototype.stacks = null;

    NoteFilterService.prototype.count = null;

    function NoteFilterService($rootScope) {
      this.$rootScope = $rootScope;
      this.query = bind(this.query, this);
    }

    NoteFilterService.prototype.query = function() {
      var i, j, len, len1, notebook, notebookGuid, notebooksArray, notebooksHash, ref, ref1, ref2, result, stack;
      result = {};
      if (this.updated) {
        merge(result, {
          updated: {
            $gte: parseInt(moment().startOf('day').subtract(this.updated, 'days').format('x'))
          }
        });
      }
      notebooksHash = {};
      if (this.notebooks && this.notebooks.length > 0) {
        ref = this.notebooks;
        for (i = 0, len = ref.length; i < len; i++) {
          notebookGuid = ref[i];
          notebooksHash[notebookGuid] = true;
        }
      }
      if (this.stacks && this.stacks.length > 0) {
        ref1 = this.stacks;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          stack = ref1[j];
          ref2 = this.$rootScope.notebooks;
          for (notebookGuid in ref2) {
            notebook = ref2[notebookGuid];
            if (stack === notebook.stack) {
              notebooksHash[notebook.guid] = true;
            }
          }
        }
      }
      notebooksArray = Object.keys(notebooksHash);
      if (notebooksArray.length > 0) {
        merge(result, {
          notebookGuid: {
            $in: notebooksArray
          }
        });
      }
      return result;
    };

    return NoteFilterService;

  })();

  app.service('noteFilter', ['$rootScope', NoteFilterService]);

  module.exports = NoteFilterService;

}).call(this);



},{}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  var ProgressService,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ProgressService = (function() {
    ProgressService.prototype.modalInstance = null;

    ProgressService.prototype.value = 0;

    ProgressService.prototype.message = '';

    function ProgressService($modal) {
      this.$modal = $modal;
      this.set = bind(this.set, this);
      this.close = bind(this.close, this);
      this.open = bind(this.open, this);
    }

    ProgressService.prototype.open = function() {
      this.message = 'processing...';
      this.value = 0;
      return this.modalInstance = this.$modal.open({
        templateUrl: 'progress-modal',
        controller: 'ProgressModalController',
        backdrop: 'static',
        keyboard: false,
        size: 'sm',
        animation: false
      });
    };

    ProgressService.prototype.close = function() {
      return this.modalInstance.close();
    };

    ProgressService.prototype.set = function(message, value) {
      if (value == null) {
        value = null;
      }
      this.message = message;
      if (value !== null) {
        return this.value = value;
      }
    };

    return ProgressService;

  })();

  app.service('progress', ['$modal', ProgressService]);

  module.exports = ProgressService;

}).call(this);



},{}]},{},[11])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY29udHJvbGxlcnMvY29udHJvbGxlci5qcyIsInNyYy9jb250cm9sbGVycy9tb2RhbC1jb250cm9sbGVyLmpzIiwic3JjL2NvbnRyb2xsZXJzL25hdmlnYXRpb24tY29udHJvbGxlci5qcyIsInNyYy9jb250cm9sbGVycy9ub3Rlcy1jb250cm9sbGVyLmpzIiwic3JjL2NvbnRyb2xsZXJzL3Byb2dyZXNzLW1vZGFsLWNvbnRyb2xsZXIuanMiLCJzcmMvY29udHJvbGxlcnMvc2V0dGluZ3MtY29udHJvbGxlci5qcyIsInNyYy9jb250cm9sbGVycy90aW1lbGluZS1jb250cm9sbGVyLmpzIiwic3JjL2RpcmVjdGl2ZXMvcmVzaXplLmpzIiwic3JjL2ZpbHRlcnMvZmlsdGVyLWJ5LXByb3BlcnR5LmpzIiwic3JjL2ZpbHRlcnMvb3JkZXItb2JqZWN0LWJ5LmpzIiwiQzpcXFVzZXJzXFxoaWdhc2hpbmFrYXRzdVxcRG9jdW1lbnRzXFx3b3Jrc3BhY2VcXGV2ZXJub3RlLXRhc2tsb2dcXHB1YmxpY1xcamF2YXNjcmlwdHNcXHNyY1xcaW5kZXguY29mZmVlIiwic3JjL3JvdXRlLmpzIiwic3JjL3NlcnZpY2VzL25vdGUtZmlsdGVyLmpzIiwic3JjL3NlcnZpY2VzL3Byb2dyZXNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0RUEsTUFBTSxDQUFDLEdBQVAsR0FBYSxPQUFPLENBQUMsTUFBUixDQUFlLEtBQWYsRUFBc0IsQ0FBQyxTQUFELEVBQVksY0FBWixFQUE0QixZQUE1QixFQUEwQyxXQUExQyxDQUF0Qjs7QUFFYixHQUFHLENBQUMsTUFBSixDQUFXO0VBQUMsa0JBQUQsRUFBcUIsU0FBQyxnQkFBRDtXQUM5QixnQkFBZ0IsQ0FBQywwQkFBakIsQ0FBNEMsbUNBQTVDO0VBRDhCLENBQXJCO0NBQVg7O0FBS0EsT0FBQSxDQUFRLFNBQVI7O0FBR0EsT0FBQSxDQUFRLDhCQUFSOztBQUNBLE9BQUEsQ0FBUSwyQkFBUjs7QUFHQSxPQUFBLENBQVEsd0JBQVI7O0FBQ0EsT0FBQSxDQUFRLHFCQUFSOztBQUdBLE9BQUEsQ0FBUSxxQkFBUjs7QUFHQSxPQUFBLENBQVEsMEJBQVI7O0FBQ0EsT0FBQSxDQUFRLHFDQUFSOztBQUNBLE9BQUEsQ0FBUSxtQ0FBUjs7QUFDQSxPQUFBLENBQVEsZ0NBQVI7O0FBQ0EsT0FBQSxDQUFRLG1DQUFSOztBQUNBLE9BQUEsQ0FBUSx5Q0FBUjs7OztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS45LjNcbihmdW5jdGlvbigpIHtcbiAgdmFyIENvbnRyb2xsZXIsXG4gICAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH07XG5cbiAgQ29udHJvbGxlciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBDb250cm9sbGVyKCRzY29wZSwgJHJvb3RTY29wZSwgJGh0dHAsIHByb2dyZXNzLCBub3RlRmlsdGVyKSB7XG4gICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcbiAgICAgIHRoaXMuJHJvb3RTY29wZSA9ICRyb290U2NvcGU7XG4gICAgICB0aGlzLiRodHRwID0gJGh0dHA7XG4gICAgICB0aGlzLnByb2dyZXNzID0gcHJvZ3Jlc3M7XG4gICAgICB0aGlzLm5vdGVGaWx0ZXIgPSBub3RlRmlsdGVyO1xuICAgICAgdGhpcy5yZWxvYWQgPSBiaW5kKHRoaXMucmVsb2FkLCB0aGlzKTtcbiAgICAgIHRoaXMuJHJvb3RTY29wZS51c2VyID0gbnVsbDtcbiAgICAgIHRoaXMuJHJvb3RTY29wZS5wZXJzb25zID0ge307XG4gICAgICB0aGlzLiRyb290U2NvcGUubm90ZWJvb2tzID0ge307XG4gICAgICB0aGlzLiRyb290U2NvcGUuc3RhY2tzID0gW107XG4gICAgICB0aGlzLiRyb290U2NvcGUubm90ZXMgPSB7fTtcbiAgICAgIHRoaXMuJHJvb3RTY29wZS50aW1lTG9ncyA9IHt9O1xuICAgICAgdGhpcy4kc2NvcGUucmVsb2FkID0gdGhpcy5yZWxvYWQ7XG4gICAgICB0aGlzLnJlbG9hZCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge307XG4gICAgICB9KSh0aGlzKSk7XG4gICAgfVxuXG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUucmVsb2FkID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHZhciBub3RlQ291bnQsIHF1ZXJ5O1xuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHt9O1xuICAgICAgICB9KSh0aGlzKTtcbiAgICAgIH1cbiAgICAgIHF1ZXJ5ID0gdGhpcy5ub3RlRmlsdGVyLnF1ZXJ5KCk7XG4gICAgICBub3RlQ291bnQgPSAwO1xuICAgICAgdGhpcy5wcm9ncmVzcy5vcGVuKCk7XG4gICAgICByZXR1cm4gYXN5bmMuc2VyaWVzKFtcbiAgICAgICAgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuJHJvb3RTY29wZS51c2VyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMucHJvZ3Jlc3Muc2V0KCdHZXR0aW5nIHVzZXIgZGF0YS4nLCAwKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy4kaHR0cC5nZXQoJy91c2VyJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIF90aGlzLiRyb290U2NvcGUudXNlciA9IGRhdGE7XG4gICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9ncmVzcy5zZXQoJ1N5bmNpbmcgcmVtb3RlIHNlcnZlci4nLCAwKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy4kaHR0cC5nZXQoJy9zeW5jJykuc3VjY2VzcyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIF90aGlzLnByb2dyZXNzLnNldCgnR2V0dGluZyBwZXJzb25zIGRhdGEuJywgMTApO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRodHRwLmdldCgnL3BlcnNvbnMnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgdmFyIGksIGxlbiwgcGVyc29uO1xuICAgICAgICAgICAgICBfdGhpcy4kcm9vdFNjb3BlLnBlcnNvbnMgPSB7fTtcbiAgICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHBlcnNvbiA9IGRhdGFbaV07XG4gICAgICAgICAgICAgICAgX3RoaXMuJHJvb3RTY29wZS5wZXJzb25zW3BlcnNvbl0gPSBwZXJzb247XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIF90aGlzLnByb2dyZXNzLnNldCgnR2V0dGluZyBub3RlYm9va3MgZGF0YS4nLCAyMCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuJGh0dHAuZ2V0KCcvbm90ZWJvb2tzJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHZhciBpLCBsZW4sIG5vdGVib29rLCBzdGFja0hhc2g7XG4gICAgICAgICAgICAgIF90aGlzLiRyb290U2NvcGUubm90ZWJvb2tzID0ge307XG4gICAgICAgICAgICAgIHN0YWNrSGFzaCA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbm90ZWJvb2sgPSBkYXRhW2ldO1xuICAgICAgICAgICAgICAgIF90aGlzLiRyb290U2NvcGUubm90ZWJvb2tzW25vdGVib29rLmd1aWRdID0gbm90ZWJvb2s7XG4gICAgICAgICAgICAgICAgaWYgKG5vdGVib29rLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgICBzdGFja0hhc2hbbm90ZWJvb2suc3RhY2tdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX3RoaXMuJHJvb3RTY29wZS5zdGFja3MgPSBPYmplY3Qua2V5cyhzdGFja0hhc2gpO1xuICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcyksIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgX3RoaXMucHJvZ3Jlc3Muc2V0KCdHZXR0aW5nIG5vdGVzIGNvdW50LicsIDMwKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy4kaHR0cC5nZXQoJy9ub3Rlcy9jb3VudCcsIHtcbiAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICBub3RlQ291bnQgPSBkYXRhO1xuICAgICAgICAgICAgICBpZiAobm90ZUNvdW50ID4gMTAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jb25maXJtKFwiQ3VycmVudCBxdWVyeSBmaW5kIFwiICsgbm90ZUNvdW50ICsgXCIgbm90ZXMuIEl0IGlzIHRvbyBtYW55LiBDb250aW51ZSBhbnl3YXk/XCIpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCdVc2VyIENhbmNlbGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIF90aGlzLnByb2dyZXNzLnNldCgnUmVxdWVzdCByZW1vdGUgY29udGVudHMuJywgNDApO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRodHRwLmdldCgnL25vdGVzL2dldC1jb250ZW50Jywge1xuICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9ncmVzcy5zZXQoJ0dldHRpbmcgbm90ZXMuJywgNjApO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRodHRwLmdldCgnL25vdGVzJywge1xuICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgICAgICAgICAgY29udGVudDogZmFsc2VcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHZhciBpLCBsZW4sIG5vdGU7XG4gICAgICAgICAgICAgIF90aGlzLiRyb290U2NvcGUubm90ZXMgPSB7fTtcbiAgICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIG5vdGUgPSBkYXRhW2ldO1xuICAgICAgICAgICAgICAgIF90aGlzLiRyb290U2NvcGUubm90ZXNbbm90ZS5ndWlkXSA9IG5vdGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBndWlkcywgbm90ZSwgbm90ZUd1aWQ7XG4gICAgICAgICAgICBfdGhpcy5wcm9ncmVzcy5zZXQoJ0dldHRpbmcgdGltZSBsb2dzLicsIDgwKTtcbiAgICAgICAgICAgIGd1aWRzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgcmVmLCByZXN1bHRzO1xuICAgICAgICAgICAgICByZWYgPSB0aGlzLiRyb290U2NvcGUubm90ZXM7XG4gICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChub3RlR3VpZCBpbiByZWYpIHtcbiAgICAgICAgICAgICAgICBub3RlID0gcmVmW25vdGVHdWlkXTtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobm90ZS5ndWlkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgIH0pLmNhbGwoX3RoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRodHRwLnBvc3QoJy90aW1lLWxvZ3MnLCB7XG4gICAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgbm90ZUd1aWQ6IHtcbiAgICAgICAgICAgICAgICAgICRpbjogZ3VpZHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGxpbWl0OiAzMDBcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICB2YXIgYmFzZSwgaSwgbGVuLCBuYW1lLCB0aW1lTG9nO1xuICAgICAgICAgICAgICBfdGhpcy4kcm9vdFNjb3BlLnRpbWVMb2dzID0ge307XG4gICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aW1lTG9nID0gZGF0YVtpXTtcbiAgICAgICAgICAgICAgICBpZiAoKGJhc2UgPSBfdGhpcy4kcm9vdFNjb3BlLnRpbWVMb2dzKVtuYW1lID0gdGltZUxvZy5ub3RlR3VpZF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgYmFzZVtuYW1lXSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy4kcm9vdFNjb3BlLnRpbWVMb2dzW3RpbWVMb2cubm90ZUd1aWRdW3RpbWVMb2cuX2lkXSA9IHRpbWVMb2c7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICBdLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIF90aGlzLnByb2dyZXNzLnNldCgnRG9uZS4nLCAxMDApO1xuICAgICAgICAgIF90aGlzLnByb2dyZXNzLmNsb3NlKCk7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29udHJvbGxlcjtcblxuICB9KSgpO1xuXG4gIGFwcC5jb250cm9sbGVyKCdDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckaHR0cCcsICdwcm9ncmVzcycsICdub3RlRmlsdGVyJywgQ29udHJvbGxlcl0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gQ29udHJvbGxlcjtcblxufSkuY2FsbCh0aGlzKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJvbGxlci5qcy5tYXBcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS45LjNcbihmdW5jdGlvbigpIHtcbiAgdmFyIE1vZGFsQ29udHJvbGxlcjtcblxuICBNb2RhbENvbnRyb2xsZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gTW9kYWxDb250cm9sbGVyKCRzY29wZSkge1xuICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIE1vZGFsQ29udHJvbGxlcjtcblxuICB9KSgpO1xuXG4gIGFwcC5jb250cm9sbGVyKCdNb2RhbENvbnRyb2xsZXInLCBbJyRzY29wZScsIE1vZGFsQ29udHJvbGxlcl0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gTW9kYWxDb250cm9sbGVyO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RhbC1jb250cm9sbGVyLmpzLm1hcFxuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjkuM1xyXG4oZnVuY3Rpb24oKSB7XHJcbiAgdmFyIE5hdmlnYXRpb25Db250cm9sbGVyO1xyXG5cclxuICBOYXZpZ2F0aW9uQ29udHJvbGxlciA9IChmdW5jdGlvbigpIHtcclxuICAgIGZ1bmN0aW9uIE5hdmlnYXRpb25Db250cm9sbGVyKCRzY29wZSwgJHJvdXRlKSB7XHJcbiAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xyXG4gICAgICB0aGlzLiRyb3V0ZSA9ICRyb3V0ZTtcclxuICAgICAgdGhpcy4kc2NvcGUubmF2Q29sbGFwc2UgPSB0cnVlO1xyXG4gICAgICB0aGlzLiRzY29wZS4kcm91dGUgPSB0aGlzLiRyb3V0ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gTmF2aWdhdGlvbkNvbnRyb2xsZXI7XHJcblxyXG4gIH0pKCk7XHJcblxyXG4gIGFwcC5jb250cm9sbGVyKCdOYXZpZ2F0aW9uQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRyb3V0ZScsIE5hdmlnYXRpb25Db250cm9sbGVyXSk7XHJcblxyXG4gIG1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvbkNvbnRyb2xsZXI7XHJcblxyXG59KS5jYWxsKHRoaXMpO1xyXG5cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmF2aWdhdGlvbi1jb250cm9sbGVyLmpzLm1hcFxyXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4zXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb3Rlc0NvbnRyb2xsZXIsXG4gICAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH07XG5cbiAgTm90ZXNDb250cm9sbGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIE5vdGVzQ29udHJvbGxlcigkc2NvcGUpIHtcbiAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgICAgdGhpcy5fb25XYXRjaFRpbWVMb2dzID0gYmluZCh0aGlzLl9vbldhdGNoVGltZUxvZ3MsIHRoaXMpO1xuICAgICAgdGhpcy5fZ2V0U3BlbnRUaW1lID0gYmluZCh0aGlzLl9nZXRTcGVudFRpbWUsIHRoaXMpO1xuICAgICAgdGhpcy4kc2NvcGUubm90ZVNwZW50VGltZXMgPSB7fTtcbiAgICAgIHRoaXMuJHNjb3BlLmdldFNwZW50VGltZSA9IHRoaXMuX2dldFNwZW50VGltZTtcbiAgICAgIHRoaXMuJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ3RpbWVMb2dzJywgdGhpcy5fb25XYXRjaFRpbWVMb2dzKTtcbiAgICB9XG5cbiAgICBOb3Rlc0NvbnRyb2xsZXIucHJvdG90eXBlLl9nZXRTcGVudFRpbWUgPSBmdW5jdGlvbihub3RlR3VpZCkge1xuICAgICAgdmFyIGhvdXIsIG1pbnV0ZTtcbiAgICAgIGlmICghdGhpcy4kc2NvcGUubm90ZVNwZW50VGltZXNbbm90ZUd1aWRdKSB7XG4gICAgICAgIHJldHVybiAnMG0nO1xuICAgICAgfVxuICAgICAgaG91ciA9IE1hdGguZmxvb3IodGhpcy4kc2NvcGUubm90ZVNwZW50VGltZXNbbm90ZUd1aWRdIC8gNjApO1xuICAgICAgbWludXRlID0gdGhpcy4kc2NvcGUubm90ZVNwZW50VGltZXNbbm90ZUd1aWRdICUgNjA7XG4gICAgICBpZiAoaG91cikge1xuICAgICAgICByZXR1cm4gaG91ciArICdoJyArIG1pbnV0ZSArICdtJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtaW51dGUgKyAnbSc7XG4gICAgfTtcblxuICAgIE5vdGVzQ29udHJvbGxlci5wcm90b3R5cGUuX29uV2F0Y2hUaW1lTG9ncyA9IGZ1bmN0aW9uKHRpbWVMb2dzKSB7XG4gICAgICB2YXIgbmFtZSwgbm90ZUd1aWQsIG5vdGVTcGVudFRpbWVzLCBub3RlVGltZUxvZywgdGltZUxvZywgdGltZUxvZ19pZDtcbiAgICAgIG5vdGVTcGVudFRpbWVzID0ge307XG4gICAgICBmb3IgKG5vdGVHdWlkIGluIHRpbWVMb2dzKSB7XG4gICAgICAgIG5vdGVUaW1lTG9nID0gdGltZUxvZ3Nbbm90ZUd1aWRdO1xuICAgICAgICBmb3IgKHRpbWVMb2dfaWQgaW4gbm90ZVRpbWVMb2cpIHtcbiAgICAgICAgICB0aW1lTG9nID0gbm90ZVRpbWVMb2dbdGltZUxvZ19pZF07XG4gICAgICAgICAgaWYgKG5vdGVTcGVudFRpbWVzW25hbWUgPSB0aW1lTG9nLm5vdGVHdWlkXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBub3RlU3BlbnRUaW1lc1tuYW1lXSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vdGVTcGVudFRpbWVzW3RpbWVMb2cubm90ZUd1aWRdICs9IHRpbWVMb2cuc3BlbnRUaW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kc2NvcGUubm90ZVNwZW50VGltZXMgPSBub3RlU3BlbnRUaW1lcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIE5vdGVzQ29udHJvbGxlcjtcblxuICB9KSgpO1xuXG4gIGFwcC5jb250cm9sbGVyKCdOb3Rlc0NvbnRyb2xsZXInLCBbJyRzY29wZScsIE5vdGVzQ29udHJvbGxlcl0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gTm90ZXNDb250cm9sbGVyO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3Rlcy1jb250cm9sbGVyLmpzLm1hcFxuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjkuM1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTW9kYWxDb250cm9sbGVyLCBQcm9ncmVzc01vZGFsQ29udHJvbGxlcixcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE1vZGFsQ29udHJvbGxlciA9IHJlcXVpcmUoJy4vbW9kYWwtY29udHJvbGxlcicpO1xuXG4gIFByb2dyZXNzTW9kYWxDb250cm9sbGVyID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoUHJvZ3Jlc3NNb2RhbENvbnRyb2xsZXIsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gUHJvZ3Jlc3NNb2RhbENvbnRyb2xsZXIoJHNjb3BlLCBwcm9ncmVzcykge1xuICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XG4gICAgICB0aGlzLnByb2dyZXNzID0gcHJvZ3Jlc3M7XG4gICAgICB0aGlzLiRzY29wZS5wcm9ncmVzcyA9IHRoaXMucHJvZ3Jlc3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb2dyZXNzTW9kYWxDb250cm9sbGVyO1xuXG4gIH0pKE1vZGFsQ29udHJvbGxlcik7XG5cbiAgYXBwLmNvbnRyb2xsZXIoJ1Byb2dyZXNzTW9kYWxDb250cm9sbGVyJywgWyckc2NvcGUnLCAncHJvZ3Jlc3MnLCBQcm9ncmVzc01vZGFsQ29udHJvbGxlcl0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gUHJvZ3Jlc3NNb2RhbENvbnRyb2xsZXI7XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2dyZXNzLW1vZGFsLWNvbnRyb2xsZXIuanMubWFwXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4zXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBTZXR0aW5nc0NvbnRyb2xsZXIsXG4gICAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH07XG5cbiAgU2V0dGluZ3NDb250cm9sbGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIFNldHRpbmdzQ29udHJvbGxlci5wcm90b3R5cGUubGFzdFF1ZXJ5U3RyID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIFNldHRpbmdzQ29udHJvbGxlcigkc2NvcGUsICRodHRwLCBub3RlRmlsdGVyKSB7XG4gICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcbiAgICAgIHRoaXMuJGh0dHAgPSAkaHR0cDtcbiAgICAgIHRoaXMubm90ZUZpbHRlciA9IG5vdGVGaWx0ZXI7XG4gICAgICB0aGlzLl9vbldhdGNoTm90ZUZpbHRlciA9IGJpbmQodGhpcy5fb25XYXRjaE5vdGVGaWx0ZXIsIHRoaXMpO1xuICAgICAgdGhpcy4kc2NvcGUubm90ZUZpbHRlciA9IHRoaXMubm90ZUZpbHRlcjtcbiAgICAgIHRoaXMuJHNjb3BlLiR3YXRjaEdyb3VwKFsnbm90ZUZpbHRlci51cGRhdGVkJywgJ25vdGVGaWx0ZXIubm90ZWJvb2tzJywgJ25vdGVGaWx0ZXIuc3RhY2tzJ10sIHRoaXMuX29uV2F0Y2hOb3RlRmlsdGVyKTtcbiAgICB9XG5cbiAgICBTZXR0aW5nc0NvbnRyb2xsZXIucHJvdG90eXBlLl9vbldhdGNoTm90ZUZpbHRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHF1ZXJ5LCBxdWVyeVN0cjtcbiAgICAgIHF1ZXJ5ID0gdGhpcy5ub3RlRmlsdGVyLnF1ZXJ5KCk7XG4gICAgICBxdWVyeVN0ciA9IEpTT04uc3RyaW5naWZ5KHF1ZXJ5KTtcbiAgICAgIGlmICh0aGlzLmxhc3RRdWVyeVN0ciA9PT0gcXVlcnlTdHIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5sYXN0UXVlcnlTdHIgPSBxdWVyeVN0cjtcbiAgICAgIHJldHVybiB0aGlzLiRodHRwLmdldCgnL25vdGVzL2NvdW50Jywge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgfVxuICAgICAgfSkuc3VjY2VzcygoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMubm90ZUZpbHRlci5jb3VudCA9IGRhdGE7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSkuZXJyb3IoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm5vdGVGaWx0ZXIuY291bnQgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0dGluZ3NDb250cm9sbGVyO1xuXG4gIH0pKCk7XG5cbiAgYXBwLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRodHRwJywgJ25vdGVGaWx0ZXInLCBTZXR0aW5nc0NvbnRyb2xsZXJdKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFNldHRpbmdzQ29udHJvbGxlcjtcblxufSkuY2FsbCh0aGlzKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0dGluZ3MtY29udHJvbGxlci5qcy5tYXBcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS45LjNcbihmdW5jdGlvbigpIHtcbiAgdmFyIFRpbWVsaW5lQ29udHJvbGxlcixcbiAgICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfTtcblxuICBUaW1lbGluZUNvbnRyb2xsZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gVGltZWxpbmVDb250cm9sbGVyKCRzY29wZSkge1xuICAgICAgdmFyIGNvbnRhaW5lciwgb3B0aW9ucztcbiAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgICAgdGhpcy5fb25SZXNpemUgPSBiaW5kKHRoaXMuX29uUmVzaXplLCB0aGlzKTtcbiAgICAgIHRoaXMuX29uV2F0Y2hQcm9maXRMb2dzID0gYmluZCh0aGlzLl9vbldhdGNoUHJvZml0TG9ncywgdGhpcyk7XG4gICAgICB0aGlzLl9vbldhdGNoTm90ZXMgPSBiaW5kKHRoaXMuX29uV2F0Y2hOb3RlcywgdGhpcyk7XG4gICAgICB0aGlzLl9vbldhdGNoUGVyc29ucyA9IGJpbmQodGhpcy5fb25XYXRjaFBlcnNvbnMsIHRoaXMpO1xuICAgICAgdGhpcy4kc2NvcGUudGltZWxpbmVJdGVtcyA9IG5ldyB2aXMuRGF0YVNldCgpO1xuICAgICAgdGhpcy4kc2NvcGUudGltZWxpbmVHcm91cHMgPSBuZXcgdmlzLkRhdGFTZXQoKTtcbiAgICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lbGluZScpO1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgbWFyZ2luOiB7XG4gICAgICAgICAgaXRlbTogNVxuICAgICAgICB9LFxuICAgICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAtIDgwLFxuICAgICAgICBvcmllbnRhdGlvbjoge1xuICAgICAgICAgIGF4aXM6ICdib3RoJyxcbiAgICAgICAgICBpdGVtOiAndG9wJ1xuICAgICAgICB9LFxuICAgICAgICBzdGFydDogbW9tZW50KCkuc3RhcnRPZignZGF5JyksXG4gICAgICAgIGVuZDogbW9tZW50KCkuZW5kT2YoJ2RheScpLFxuICAgICAgICBoaWRkZW5EYXRlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXJ0OiBtb21lbnQoKS5zdWJ0cmFjdCgxLCAnZGF5cycpLnN0YXJ0T2YoJ2RheScpLmhvdXIoMjApLFxuICAgICAgICAgICAgZW5kOiBtb21lbnQoKS5zdGFydE9mKCdkYXknKS5ob3VyKDgpLFxuICAgICAgICAgICAgcmVwZWF0OiAnZGFpbHknXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBvcmRlcjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiBhLnN0YXJ0IC0gYi5zdGFydDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuJHNjb3BlLnRpbWVsaW5lID0gbmV3IHZpcy5UaW1lbGluZShjb250YWluZXIsIHRoaXMuJHNjb3BlLnRpbWVsaW5lSXRlbXMsIHRoaXMuJHNjb3BlLnRpbWVsaW5lR3JvdXBzLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ3BlcnNvbnMnLCB0aGlzLl9vbldhdGNoUGVyc29ucyk7XG4gICAgICB0aGlzLiRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCdub3RlcycsIHRoaXMuX29uV2F0Y2hOb3Rlcyk7XG4gICAgICB0aGlzLiRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCd0aW1lTG9ncycsIHRoaXMuX29uV2F0Y2hOb3Rlcyk7XG4gICAgICB0aGlzLiRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCdwcm9maXRMb2dzJywgdGhpcy5fb25XYXRjaFByb2ZpdExvZ3MpO1xuICAgICAgdGhpcy4kc2NvcGUuJG9uKCdyZXNpemU6OnJlc2l6ZScsIHRoaXMuX29uUmVzaXplKTtcbiAgICB9XG5cbiAgICBUaW1lbGluZUNvbnRyb2xsZXIucHJvdG90eXBlLl9vbldhdGNoUGVyc29ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGtleSwgcGVyc29uLCByZWY7XG4gICAgICB0aGlzLiRzY29wZS50aW1lbGluZUdyb3Vwcy5jbGVhcigpO1xuICAgICAgcmVmID0gdGhpcy4kc2NvcGUucGVyc29ucztcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICBwZXJzb24gPSByZWZba2V5XTtcbiAgICAgICAgdGhpcy4kc2NvcGUudGltZWxpbmVHcm91cHMuYWRkKHtcbiAgICAgICAgICBpZDoga2V5LFxuICAgICAgICAgIGNvbnRlbnQ6IHBlcnNvblxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLiRzY29wZS50aW1lbGluZUdyb3Vwcy5hZGQoe1xuICAgICAgICBpZDogJ3VwZGF0ZWQnLFxuICAgICAgICBjb250ZW50OiAnVXBkYXRlJ1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFRpbWVsaW5lQ29udHJvbGxlci5wcm90b3R5cGUuX29uV2F0Y2hOb3RlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vdGUsIG5vdGVHdWlkLCBub3RlVGltZUxvZywgcmVmLCByZWYxLCByZXN1bHRzLCB0aW1lTG9nLCB0aW1lTG9nc19pZDtcbiAgICAgIHRoaXMuJHNjb3BlLnRpbWVsaW5lSXRlbXMuY2xlYXIoKTtcbiAgICAgIHJlZiA9IHRoaXMuJHNjb3BlLm5vdGVzO1xuICAgICAgZm9yIChub3RlR3VpZCBpbiByZWYpIHtcbiAgICAgICAgbm90ZSA9IHJlZltub3RlR3VpZF07XG4gICAgICAgIHRoaXMuJHNjb3BlLnRpbWVsaW5lSXRlbXMuYWRkKHtcbiAgICAgICAgICBpZDogbm90ZS5ndWlkLFxuICAgICAgICAgIGdyb3VwOiAndXBkYXRlZCcsXG4gICAgICAgICAgY29udGVudDogXCI8YSBocmVmPVxcXCJldmVybm90ZTovLy92aWV3L1wiICsgdGhpcy4kc2NvcGUudXNlci5pZCArIFwiL1wiICsgdGhpcy4kc2NvcGUudXNlci5zaGFyZElkICsgXCIvXCIgKyBub3RlLmd1aWQgKyBcIi9cIiArIG5vdGUuZ3VpZCArIFwiL1xcXCI+XCIgKyBub3RlLnRpdGxlICsgXCI8L2E+XCIsXG4gICAgICAgICAgc3RhcnQ6IG5ldyBEYXRlKG5vdGUudXBkYXRlZCksXG4gICAgICAgICAgdHlwZTogJ3BvaW50J1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJlZjEgPSB0aGlzLiRzY29wZS50aW1lTG9ncztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAobm90ZUd1aWQgaW4gcmVmMSkge1xuICAgICAgICBub3RlVGltZUxvZyA9IHJlZjFbbm90ZUd1aWRdO1xuICAgICAgICByZXN1bHRzLnB1c2goKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciByZXN1bHRzMTtcbiAgICAgICAgICByZXN1bHRzMSA9IFtdO1xuICAgICAgICAgIGZvciAodGltZUxvZ3NfaWQgaW4gbm90ZVRpbWVMb2cpIHtcbiAgICAgICAgICAgIHRpbWVMb2cgPSBub3RlVGltZUxvZ1t0aW1lTG9nc19pZF07XG4gICAgICAgICAgICByZXN1bHRzMS5wdXNoKHRoaXMuJHNjb3BlLnRpbWVsaW5lSXRlbXMuYWRkKHtcbiAgICAgICAgICAgICAgaWQ6IHRpbWVMb2cuX2lkLFxuICAgICAgICAgICAgICBncm91cDogdGltZUxvZy5wZXJzb24sXG4gICAgICAgICAgICAgIGNvbnRlbnQ6IFwiPGEgaHJlZj1cXFwiZXZlcm5vdGU6Ly8vdmlldy9cIiArIHRoaXMuJHNjb3BlLnVzZXIuaWQgKyBcIi9cIiArIHRoaXMuJHNjb3BlLnVzZXIuc2hhcmRJZCArIFwiL1wiICsgdGltZUxvZy5ub3RlR3VpZCArIFwiL1wiICsgdGltZUxvZy5ub3RlR3VpZCArIFwiL1xcXCI+XCIgKyB0aGlzLiRzY29wZS5ub3Rlc1t0aW1lTG9nLm5vdGVHdWlkXS50aXRsZSArIFwiIFwiICsgdGltZUxvZy5jb21tZW50ICsgXCI8L2E+XCIsXG4gICAgICAgICAgICAgIHN0YXJ0OiBtb21lbnQodGltZUxvZy5kYXRlKSxcbiAgICAgICAgICAgICAgZW5kOiB0aW1lTG9nLnNwZW50VGltZSA/IG1vbWVudCh0aW1lTG9nLmRhdGUpLmFkZCh0aW1lTG9nLnNwZW50VGltZSwgJ21pbnV0ZXMnKSA6IG51bGwsXG4gICAgICAgICAgICAgIHR5cGU6IHRpbWVMb2cuc3BlbnRUaW1lID8gJ3JhbmdlJyA6ICdwb2ludCdcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHMxO1xuICAgICAgICB9KS5jYWxsKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBUaW1lbGluZUNvbnRyb2xsZXIucHJvdG90eXBlLl9vbldhdGNoUHJvZml0TG9ncyA9IGZ1bmN0aW9uKCkge307XG5cbiAgICBUaW1lbGluZUNvbnRyb2xsZXIucHJvdG90eXBlLl9vblJlc2l6ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy4kc2NvcGUudGltZWxpbmUuc2V0T3B0aW9ucyh7XG4gICAgICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IC0gOTBcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gVGltZWxpbmVDb250cm9sbGVyO1xuXG4gIH0pKCk7XG5cbiAgYXBwLmNvbnRyb2xsZXIoJ1RpbWVsaW5lQ29udHJvbGxlcicsIFsnJHNjb3BlJywgVGltZWxpbmVDb250cm9sbGVyXSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBUaW1lbGluZUNvbnRyb2xsZXI7XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVsaW5lLWNvbnRyb2xsZXIuanMubWFwXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4zXG4oZnVuY3Rpb24oKSB7XG4gIGFwcC5kaXJlY3RpdmUoJ3Jlc2l6ZScsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkcm9vdFNjb3BlLCAkd2luZG93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbms6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGltZXI7XG4gICAgICAgIHRpbWVyID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub24oJ2xvYWQgcmVzaXplJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aW1lciA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRyb290U2NvcGUuJGJyb2FkY2FzdCgncmVzaXplOjpyZXNpemUnKTtcbiAgICAgICAgICB9LCAyMDApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzaXplLmpzLm1hcFxuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjkuM1xyXG4oZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGNoZWNrSXRlbU1hdGNoZXMsIGZpbHRlckJ5UHJvcGVydHk7XHJcblxyXG4gIGNoZWNrSXRlbU1hdGNoZXMgPSAoZnVuY3Rpb24oX3RoaXMpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihpdGVtLCBwcm9wcykge1xyXG4gICAgICB2YXIgaXRlbU1hdGNoZXMsIHByb3AsIHRleHQ7XHJcbiAgICAgIGl0ZW1NYXRjaGVzID0gZmFsc2U7XHJcbiAgICAgIGZvciAocHJvcCBpbiBwcm9wcykge1xyXG4gICAgICAgIHRleHQgPSBwcm9wc1twcm9wXTtcclxuICAgICAgICB0ZXh0ID0gdGV4dC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGlmIChpdGVtW3Byb3BdLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRleHQpICE9PSAtMSkge1xyXG4gICAgICAgICAgaXRlbU1hdGNoZXMgPSB0cnVlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBpdGVtTWF0Y2hlcztcclxuICAgIH07XHJcbiAgfSkodGhpcyk7XHJcblxyXG4gIGZpbHRlckJ5UHJvcGVydHkgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihpdGVtcywgcHJvcHMpIHtcclxuICAgICAgdmFyIGksIGl0ZW0sIGl0ZW1NYXRjaGVzLCBrZXksIGxlbiwgb3V0O1xyXG4gICAgICBvdXQgPSBbXTtcclxuICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShpdGVtcykpIHtcclxuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICAgICAgaXRlbU1hdGNoZXMgPSBjaGVja0l0ZW1NYXRjaGVzKGl0ZW0sIHByb3BzKTtcclxuICAgICAgICAgIGlmIChpdGVtTWF0Y2hlcykge1xyXG4gICAgICAgICAgICBvdXQucHVzaChpdGVtKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc09iamVjdChpdGVtcykpIHtcclxuICAgICAgICBmb3IgKGtleSBpbiBpdGVtcykge1xyXG4gICAgICAgICAgaXRlbSA9IGl0ZW1zW2tleV07XHJcbiAgICAgICAgICBpdGVtTWF0Y2hlcyA9IGNoZWNrSXRlbU1hdGNoZXMoaXRlbSwgcHJvcHMpO1xyXG4gICAgICAgICAgaWYgKGl0ZW1NYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIG91dC5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvdXQgPSBpdGVtcztcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gb3V0O1xyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICBhcHAuZmlsdGVyKCdmaWx0ZXJCeVByb3BlcnR5JywgZmlsdGVyQnlQcm9wZXJ0eSk7XHJcblxyXG4gIG1vZHVsZS5leHBvcnRzID0gZmlsdGVyQnlQcm9wZXJ0eTtcclxuXHJcbn0pLmNhbGwodGhpcyk7XHJcblxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXItYnktcHJvcGVydHkuanMubWFwXHJcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS45LjNcclxuKGZ1bmN0aW9uKCkge1xyXG4gIHZhciBvcmRlck9iamVjdEJ5O1xyXG5cclxuICBvcmRlck9iamVjdEJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oaXRlbXMsIGZpZWxkLCByZXZlcnNlKSB7XHJcbiAgICAgIHZhciBmaWx0ZXJlZCwgcmVzdWx0cztcclxuICAgICAgaWYgKGZpZWxkID09IG51bGwpIHtcclxuICAgICAgICBmaWVsZCA9ICckdmFsdWUnO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChyZXZlcnNlID09IG51bGwpIHtcclxuICAgICAgICByZXZlcnNlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBmaWx0ZXJlZCA9IFtdO1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGtleSkge1xyXG4gICAgICAgIHJldHVybiBmaWx0ZXJlZC5wdXNoKHtcclxuICAgICAgICAgIGtleToga2V5LFxyXG4gICAgICAgICAgaXRlbTogaXRlbVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgZmlsdGVyZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgaWYgKGZpZWxkID09PSAnJGtleScpIHtcclxuICAgICAgICAgIGlmIChhLmtleSA+IGIua2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmllbGQgPT09ICckdmFsdWUnKSB7XHJcbiAgICAgICAgICBpZiAoYS5pdGVtID4gYi5pdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGZpZWxkID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgaWYgKGFbZmllbGRdID4gYltmaWVsZF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgZmllbGQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIGlmIChmaWVsZChhLml0ZW0sIGEua2V5KSA+IGZpZWxkKGIuaXRlbSwgYi5rZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGlmIChyZXZlcnNlKSB7XHJcbiAgICAgICAgZmlsdGVyZWQucmV2ZXJzZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHJlc3VsdHMgPSBbXTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGZpbHRlcmVkLCBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICByZXN1bHQgPSBpdGVtLml0ZW07XHJcbiAgICAgICAgcmVzdWx0Wycka2V5J10gPSBpdGVtLmtleTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0cy5wdXNoKHJlc3VsdCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgYXBwLmZpbHRlcignb3JkZXJPYmplY3RCeScsIG9yZGVyT2JqZWN0QnkpO1xyXG5cclxuICBtb2R1bGUuZXhwb3J0cyA9IG9yZGVyT2JqZWN0Qnk7XHJcblxyXG59KS5jYWxsKHRoaXMpO1xyXG5cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3JkZXItb2JqZWN0LWJ5LmpzLm1hcFxyXG4iLCIjIGFuZ3VsYXIuanMgc2V0dGluZ1xyXG53aW5kb3cuYXBwID0gYW5ndWxhci5tb2R1bGUoJ0FwcCcsIFsnbmdSb3V0ZScsICd1aS5ib290c3RyYXAnLCAnbmdTYW5pdGl6ZScsICd1aS5zZWxlY3QnXSlcclxuXHJcbmFwcC5jb25maWcgWyckY29tcGlsZVByb3ZpZGVyJywgKCRjb21waWxlUHJvdmlkZXIpIC0+XHJcbiAgJGNvbXBpbGVQcm92aWRlci5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCgvXlxccyooaHR0cHxodHRwc3xtYWlsdG98ZXZlcm5vdGUpOi8pO1xyXG5dXHJcblxyXG4jIHJvdXRlIHNldHRpbmdzXHJcbnJlcXVpcmUgJy4vcm91dGUnXHJcblxyXG4jIGFuZ3VsYXIuanMgZmlsdGVyc1xyXG5yZXF1aXJlICcuL2ZpbHRlcnMvZmlsdGVyLWJ5LXByb3BlcnR5J1xyXG5yZXF1aXJlICcuL2ZpbHRlcnMvb3JkZXItb2JqZWN0LWJ5J1xyXG5cclxuIyBhbmd1bGFyLmpzIHNlcnZpY2VzXHJcbnJlcXVpcmUgJy4vc2VydmljZXMvbm90ZS1maWx0ZXInXHJcbnJlcXVpcmUgJy4vc2VydmljZXMvcHJvZ3Jlc3MnXHJcblxyXG4jIGFuZ3VsYXIuanMgZGlyZWN0aXZlc1xyXG5yZXF1aXJlICcuL2RpcmVjdGl2ZXMvcmVzaXplJ1xyXG5cclxuIyBhbmd1bGFyLmpzIGNvbnRyb2xsZXJzXHJcbnJlcXVpcmUgJy4vY29udHJvbGxlcnMvY29udHJvbGxlcidcclxucmVxdWlyZSAnLi9jb250cm9sbGVycy9uYXZpZ2F0aW9uLWNvbnRyb2xsZXInXHJcbnJlcXVpcmUgJy4vY29udHJvbGxlcnMvdGltZWxpbmUtY29udHJvbGxlcidcclxucmVxdWlyZSAnLi9jb250cm9sbGVycy9ub3Rlcy1jb250cm9sbGVyJ1xyXG5yZXF1aXJlICcuL2NvbnRyb2xsZXJzL3NldHRpbmdzLWNvbnRyb2xsZXInXHJcbnJlcXVpcmUgJy4vY29udHJvbGxlcnMvcHJvZ3Jlc3MtbW9kYWwtY29udHJvbGxlcidcclxuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjkuM1xuKGZ1bmN0aW9uKCkge1xuICBhcHAuY29uZmlnKFtcbiAgICAnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAgICAgcmV0dXJuICRyb3V0ZVByb3ZpZGVyLndoZW4oJy8nLCB7XG4gICAgICAgIHJlZGlyZWN0VG86ICcvdGltZWxpbmUnXG4gICAgICB9KS53aGVuKCcvdGltZWxpbmUnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndGltZWxpbmUnXG4gICAgICB9KS53aGVuKCcvbm90ZXMnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAnbm90ZXMnXG4gICAgICB9KS53aGVuKCcvc2V0dGluZ3MnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAnc2V0dGluZ3MnXG4gICAgICB9KS5vdGhlcndpc2Uoe1xuICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICAgIH0pO1xuICAgIH1cbiAgXSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlLmpzLm1hcFxuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjkuM1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm90ZUZpbHRlclNlcnZpY2UsXG4gICAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH07XG5cbiAgTm90ZUZpbHRlclNlcnZpY2UgPSAoZnVuY3Rpb24oKSB7XG4gICAgTm90ZUZpbHRlclNlcnZpY2UucHJvdG90eXBlLnVwZGF0ZWQgPSAzO1xuXG4gICAgTm90ZUZpbHRlclNlcnZpY2UucHJvdG90eXBlLm5vdGVib29rcyA9IG51bGw7XG5cbiAgICBOb3RlRmlsdGVyU2VydmljZS5wcm90b3R5cGUuc3RhY2tzID0gbnVsbDtcblxuICAgIE5vdGVGaWx0ZXJTZXJ2aWNlLnByb3RvdHlwZS5jb3VudCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBOb3RlRmlsdGVyU2VydmljZSgkcm9vdFNjb3BlKSB7XG4gICAgICB0aGlzLiRyb290U2NvcGUgPSAkcm9vdFNjb3BlO1xuICAgICAgdGhpcy5xdWVyeSA9IGJpbmQodGhpcy5xdWVyeSwgdGhpcyk7XG4gICAgfVxuXG4gICAgTm90ZUZpbHRlclNlcnZpY2UucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgaiwgbGVuLCBsZW4xLCBub3RlYm9vaywgbm90ZWJvb2tHdWlkLCBub3RlYm9va3NBcnJheSwgbm90ZWJvb2tzSGFzaCwgcmVmLCByZWYxLCByZWYyLCByZXN1bHQsIHN0YWNrO1xuICAgICAgcmVzdWx0ID0ge307XG4gICAgICBpZiAodGhpcy51cGRhdGVkKSB7XG4gICAgICAgIG1lcmdlKHJlc3VsdCwge1xuICAgICAgICAgIHVwZGF0ZWQ6IHtcbiAgICAgICAgICAgICRndGU6IHBhcnNlSW50KG1vbWVudCgpLnN0YXJ0T2YoJ2RheScpLnN1YnRyYWN0KHRoaXMudXBkYXRlZCwgJ2RheXMnKS5mb3JtYXQoJ3gnKSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgbm90ZWJvb2tzSGFzaCA9IHt9O1xuICAgICAgaWYgKHRoaXMubm90ZWJvb2tzICYmIHRoaXMubm90ZWJvb2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVmID0gdGhpcy5ub3RlYm9va3M7XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIG5vdGVib29rR3VpZCA9IHJlZltpXTtcbiAgICAgICAgICBub3RlYm9va3NIYXNoW25vdGVib29rR3VpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGFja3MgJiYgdGhpcy5zdGFja3MubGVuZ3RoID4gMCkge1xuICAgICAgICByZWYxID0gdGhpcy5zdGFja3M7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgIHN0YWNrID0gcmVmMVtqXTtcbiAgICAgICAgICByZWYyID0gdGhpcy4kcm9vdFNjb3BlLm5vdGVib29rcztcbiAgICAgICAgICBmb3IgKG5vdGVib29rR3VpZCBpbiByZWYyKSB7XG4gICAgICAgICAgICBub3RlYm9vayA9IHJlZjJbbm90ZWJvb2tHdWlkXTtcbiAgICAgICAgICAgIGlmIChzdGFjayA9PT0gbm90ZWJvb2suc3RhY2spIHtcbiAgICAgICAgICAgICAgbm90ZWJvb2tzSGFzaFtub3RlYm9vay5ndWlkXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub3RlYm9va3NBcnJheSA9IE9iamVjdC5rZXlzKG5vdGVib29rc0hhc2gpO1xuICAgICAgaWYgKG5vdGVib29rc0FycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgbWVyZ2UocmVzdWx0LCB7XG4gICAgICAgICAgbm90ZWJvb2tHdWlkOiB7XG4gICAgICAgICAgICAkaW46IG5vdGVib29rc0FycmF5XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHJldHVybiBOb3RlRmlsdGVyU2VydmljZTtcblxuICB9KSgpO1xuXG4gIGFwcC5zZXJ2aWNlKCdub3RlRmlsdGVyJywgWyckcm9vdFNjb3BlJywgTm90ZUZpbHRlclNlcnZpY2VdKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IE5vdGVGaWx0ZXJTZXJ2aWNlO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3RlLWZpbHRlci5qcy5tYXBcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS45LjNcbihmdW5jdGlvbigpIHtcbiAgdmFyIFByb2dyZXNzU2VydmljZSxcbiAgICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfTtcblxuICBQcm9ncmVzc1NlcnZpY2UgPSAoZnVuY3Rpb24oKSB7XG4gICAgUHJvZ3Jlc3NTZXJ2aWNlLnByb3RvdHlwZS5tb2RhbEluc3RhbmNlID0gbnVsbDtcblxuICAgIFByb2dyZXNzU2VydmljZS5wcm90b3R5cGUudmFsdWUgPSAwO1xuXG4gICAgUHJvZ3Jlc3NTZXJ2aWNlLnByb3RvdHlwZS5tZXNzYWdlID0gJyc7XG5cbiAgICBmdW5jdGlvbiBQcm9ncmVzc1NlcnZpY2UoJG1vZGFsKSB7XG4gICAgICB0aGlzLiRtb2RhbCA9ICRtb2RhbDtcbiAgICAgIHRoaXMuc2V0ID0gYmluZCh0aGlzLnNldCwgdGhpcyk7XG4gICAgICB0aGlzLmNsb3NlID0gYmluZCh0aGlzLmNsb3NlLCB0aGlzKTtcbiAgICAgIHRoaXMub3BlbiA9IGJpbmQodGhpcy5vcGVuLCB0aGlzKTtcbiAgICB9XG5cbiAgICBQcm9ncmVzc1NlcnZpY2UucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMubWVzc2FnZSA9ICdwcm9jZXNzaW5nLi4uJztcbiAgICAgIHRoaXMudmFsdWUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMubW9kYWxJbnN0YW5jZSA9IHRoaXMuJG1vZGFsLm9wZW4oe1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3Byb2dyZXNzLW1vZGFsJyxcbiAgICAgICAgY29udHJvbGxlcjogJ1Byb2dyZXNzTW9kYWxDb250cm9sbGVyJyxcbiAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxuICAgICAgICBrZXlib2FyZDogZmFsc2UsXG4gICAgICAgIHNpemU6ICdzbScsXG4gICAgICAgIGFuaW1hdGlvbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBQcm9ncmVzc1NlcnZpY2UucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RhbEluc3RhbmNlLmNsb3NlKCk7XG4gICAgfTtcblxuICAgIFByb2dyZXNzU2VydmljZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obWVzc2FnZSwgdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb2dyZXNzU2VydmljZTtcblxuICB9KSgpO1xuXG4gIGFwcC5zZXJ2aWNlKCdwcm9ncmVzcycsIFsnJG1vZGFsJywgUHJvZ3Jlc3NTZXJ2aWNlXSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBQcm9ncmVzc1NlcnZpY2U7XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2dyZXNzLmpzLm1hcFxuIl19
